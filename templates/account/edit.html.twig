{% extends 'base.html.twig' %}

{% block title %}Edit Account{% endblock %}

{% block body %}
<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-10">
            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h1 class="h3 mb-0">Edit Account: {{ account.name }}</h1>
                </div>
                <div class="card-body">
                    {{ form_start(form) }}

                    <div class="row">
                        <!-- Left column for basic info -->
                        <div class="col-md-6 pe-md-4">
                            <div class="mb-4">
                                {{ form_label(form.name, null, {'label_attr': {'class': 'form-label fw-bold'}}) }}
                                {{ form_widget(form.name, {'attr': {'class': 'form-control form-control-lg bg-light border-0 shadow-sm'}}) }}
                                {{ form_errors(form.name) }}
                            </div>

                            <div class="mb-4">
                                {{ form_label(form.status, null, {'label_attr': {'class': 'form-label fw-bold'}}) }}
                                {{ form_widget(form.status, {'attr': {'class': 'form-select bg-light border-0 shadow-sm'}}) }}
                                {{ form_errors(form.status) }}
                            </div>
                        </div>

                        <!-- Right column for contacts -->
                        <div class="col-md-6 ps-md-4">
                            <div class="mb-4">
                                <label class="form-label fw-bold">Account Contacts</label>
                                <div class="input-group mb-3 shadow-sm">
                                    <input type="text" id="contact-input" class="form-control bg-light border-0" placeholder="Add a contact">
                                    <button class="btn btn-primary" type="button" id="add-contact-btn">
                                        <i class="fas fa-plus me-1"></i> Add
                                    </button>
                                </div>
                                <div id="contacts-container" class="d-flex flex-wrap gap-2 mb-3 p-3 bg-light rounded-3">
                                    <!-- Contact tags will be added here -->
                                </div>
                                <small class="text-muted fst-italic">Press Enter or click Add to add a contact</small>
                                {{ form_widget(form.contacts) }}
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end gap-2 mt-4">
                        <a href="{{ path('app_accounts') }}" class="btn btn-outline-secondary px-4">
                            <i class="fas fa-arrow-left me-1"></i> Back to list
                        </a>
                        <button class="btn btn-primary px-4 shadow-sm">
                            <i class="fas fa-save me-1"></i> {{ button_label|default('Update Account') }}
                        </button>
                    </div>

                    {{ form_end(form) }}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const contactInput = document.getElementById('contact-input');
        const addContactBtn = document.getElementById('add-contact-btn');
        const contactsContainer = document.getElementById('contacts-container');

        // Try to find the contacts input with the expected ID
        let contactsJsonInput = document.getElementById('account_contacts_json');

        // If not found, try to find it by name
        if (!contactsJsonInput) {
            console.error('Could not find element with ID "account_contacts_json"');
            // Look for any hidden input that might be the contacts field
            const hiddenInputs = document.querySelectorAll('input[type="hidden"]');
            console.log('Found hidden inputs:', hiddenInputs.length);

            // Log all hidden inputs for debugging
            hiddenInputs.forEach((input, index) => {
                console.log(`Hidden input ${index}:`, input.id, input.name);
            });

            // Try to find by name
            contactsJsonInput = document.querySelector('input[name="account[contacts]"]');
            if (contactsJsonInput) {
                console.log('Found contacts input by name:', contactsJsonInput.name);
            } else {
                console.error('Could not find contacts input by name either');
                // Create a fallback element if needed
                contactsJsonInput = document.createElement('input');
                contactsJsonInput.type = 'hidden';
                contactsJsonInput.id = 'account_contacts_json';
                contactsJsonInput.name = 'account[contacts]';
                document.querySelector('form').appendChild(contactsJsonInput);
                console.log('Created fallback contacts input');
            }
        } else {
            console.log('Found contacts input with ID:', contactsJsonInput.id);
        }

        // Array to store contacts
        let contacts = [];

        // Initialize contacts from existing data if available
        if (contactsJsonInput.value) {
            try {
                contacts = JSON.parse(contactsJsonInput.value);
                renderContacts();
            } catch (e) {
                console.error('Error parsing contacts JSON:', e);
                // Initialize as empty array if parsing fails
                contacts = [];
            }
        } else {
            // Initialize as empty array if no value
            contacts = [];
        }

        // Function to add a contact
        function addContact() {
            const contactName = contactInput.value.trim();
            if (contactName && !contacts.includes(contactName)) {
                contacts.push(contactName);
                contactInput.value = '';
                renderContacts();
                updateContactsJson();
                console.log('Contact added:', contactName);
                console.log('Current contacts:', contacts);
                console.log('JSON value:', contactsJsonInput.value);
            } else if (!contactName) {
                console.log('Contact name is empty');
            } else {
                console.log('Contact already exists:', contactName);
            }
        }

        // Function to remove a contact
        function removeContact(index) {
            contacts.splice(index, 1);
            renderContacts();
            updateContactsJson();
        }

        // Function to render contacts as tags
        function renderContacts() {
            contactsContainer.innerHTML = '';
            contacts.forEach((contact, index) => {
                const tag = document.createElement('div');
                tag.className = 'badge bg-white text-dark d-flex align-items-center p-2 rounded-pill shadow-sm border';
                tag.innerHTML = `
                    <span>${contact}</span>
                    <button type="button" class="btn-close ms-2 text-secondary" style="font-size: 0.65rem;" aria-label="Remove"></button>
                `;
                tag.querySelector('.btn-close').addEventListener('click', () => removeContact(index));
                contactsContainer.appendChild(tag);
            });
        }

        // Function to update the hidden input with JSON
        function updateContactsJson() {
            const jsonValue = JSON.stringify(contacts);
            contactsJsonInput.value = jsonValue;
            console.log('Updated contacts JSON input value:', jsonValue);
        }

        // Event listeners
        addContactBtn.addEventListener('click', function(e) {
            e.preventDefault(); // Prevent any default action
            console.log('Add button clicked');
            addContact();
        });

        contactInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                e.preventDefault(); // Prevent form submission
                console.log('Enter key pressed');
                addContact();
            }
        });

        // Log initial state
        console.log('Initial contacts JSON input value:', contactsJsonInput.value);
        console.log('Initial contacts array:', contacts);
    });
</script>
{% endblock %}
