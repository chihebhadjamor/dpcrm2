{% extends 'base.html.twig' %}

{% block title %}Accounts{% endblock %}

{% block stylesheets %}
<style>
    .editable {
        /* Removed cursor: pointer to indicate cells are not directly editable */
    }

    /* Removed hover effect for a more stable UI experience */

    /* Add style for when row is in edit mode */
    .editing .editable {
        cursor: text;
    }

    {% include 'partials/action_styles.html.twig' %}

    /* Split view layout */
    .split-view-container {
        display: flex;
        flex-wrap: wrap;
    }

    .accounts-column {
        width: 35%;
        padding-right: 15px;
    }

    .actions-column {
        width: 65%;
    }

    /* Responsive design for smaller screens */
    @media (max-width: 992px) {
        .accounts-column, .actions-column {
            width: 100%;
        }

        .accounts-column {
            margin-bottom: 20px;
            padding-right: 0;
        }
    }

    /* Adjust font sizes for better readability */
    .accounts-column .table {
        font-size: 1.05rem;
    }

    /* Empty actions placeholder */
    .actions-placeholder {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
        background-color: #f8f9fa;
        border-radius: 5px;
        font-size: 1.2rem;
        color: #6c757d;
    }

    /* Notes count badge */
    .notes-badge {
        display: inline-flex;
        justify-content: center;
        align-items: center;
        width: 20px;
        height: 20px;
        background-color: red;
        color: white;
        border-radius: 50%;
        font-size: 0.75rem;
        margin-left: 5px;
        text-align: center;
        line-height: 1;
        padding: 0;
        font-weight: bold;
    }
</style>
{% endblock %}

{% block body %}
<!-- Notification container for displaying alerts -->
<div id="notification-container" style="position: fixed; top: 20px; right: 20px; z-index: 9999;"></div>

<div class="split-view-container mb-4">
    <!-- Left Column: Accounts List (40% width) -->
    <div class="accounts-column">
        <div class="card">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h4 class="mb-0">Accounts List</h4>
                <button type="button" class="btn btn-light" id="create-account-btn">
                    <i class="fas fa-plus"></i> Create Account
                </button>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th class="sortable" data-sort="id">ID</th>
                                <th class="sortable" data-sort="name">Account</th>
                                <th class="sortable" data-sort="nextStepDate" style="width: 150px;">Next Action</th>
                                <th class="sortable" data-sort="owner">Owner</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Form row for creating new account -->
                            <tr id="account-form-row" style="display: none;">
                                <td><i>New</i></td>
                                <td>
                                    <input type="text" class="form-control" id="account-name" name="name" placeholder="Account" required>
                                </td>
                                <td>
                                    <!-- Next Action field -->
                                </td>
                                <td>
                                    <!-- Owner will be set to current user -->
                                </td>
                                <td>
                                    <button type="button" id="save-account-btn" class="btn btn-sm btn-success text-white">Save</button>
                                    <button type="button" id="cancel-account-btn" class="btn btn-sm btn-secondary">Cancel</button>
                                </td>
                            </tr>
                            {% for account in accounts %}
                                <tr class="account-row" data-account-id="{{ account.id }}" style="cursor: pointer;">
                                    <td>{{ account.id }}</td>
                                    <td class="editable" data-field="name" data-account-id="{{ account.id }}">{{ account.name }}</td>
                                    <td>
                                        {% if nextActions[account.id] is defined %}
                                            {{ nextActions[account.id].nextStepDate|app_date }}
                                        {% endif %}
                                    </td>
                                    <td>{% if nextActions[account.id] is defined %}{{ nextActions[account.id].owner.username }}{% endif %}</td>
                                    <td>
                                        <a href="{{ path('app_account_edit', {'id': account.id}) }}" class="btn btn-sm btn-outline-success">
                                            <i class="fas fa-edit"></i> Edit
                                        </a>
                                    </td>
                                </tr>
                            {% else %}
                                <tr>
                                    <td colspan="5" class="text-center">No accounts found</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Right Column: Actions View (60% width) -->
    <div class="actions-column">
        <!-- Actions Table Section -->
        <div id="actions-section">
            <div class="card">
                <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0" id="actions-header">Account Actions</h4>
                    <button type="button" class="btn btn-light" id="create-action-btn" disabled>
                        <i class="fas fa-plus"></i> Create Action
                    </button>
                </div>
                <div class="card-body">
                    <!-- Placeholder when no account is selected -->
                    <div id="actions-placeholder" class="actions-placeholder">
                        <p>Select an account to see its actions</p>
                    </div>

                    <!-- Actions table container -->
                    <div id="actions-table-container" style="display: none; max-height: 70vh; overflow-y: auto;">
                        <!-- Open Actions Table -->
                        <h5>Open Actions</h5>
                        <table id="open-actions-table" class="table table-striped mb-4">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Contact</th>
                                    <th>Action</th>
                                    <th>Action Date</th>
                                    <th>Owner</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                    <th>Notes <span id="open-notes-badge-container"></span></th>
                                </tr>
                            </thead>
                            <tbody id="open-actions-tbody">
                                <!-- Form row for creating new actions -->
                                <tr id="action-form-row" style="display: none;">
                                    <td><i>New</i></td>
                                    <td>
                                        <select class="form-control" id="action-contact" name="contact" required>
                                            <option value="">Select Contact</option>
                                            <!-- Account contacts will be loaded here -->
                                        </select>
                                    </td>
                                    <td>
                                        <input type="text" class="form-control" id="action-title" name="title" placeholder="Title" required>
                                    </td>
                                    <td>
                                        <input type="date" class="form-control" id="action-next-step-date" name="nextStepDate">
                                    </td>
                                    <td>
                                        <select class="form-control" id="action-owner" name="owner" required>
                                            <option value="">Select Owner</option>
                                            <!-- Users will be loaded here -->
                                        </select>
                                    </td>
                                    <td>
                                        <!-- New actions are not closed by default -->
                                    </td>
                                    <td>
                                        <button type="button" id="save-action-btn" class="btn btn-sm btn-info text-white">Save</button>
                                        <button type="button" id="cancel-action-btn" class="btn btn-sm btn-secondary">Cancel</button>
                                    </td>
                                    <td>
                                        <!-- Notes column (empty for new actions) -->
                                    </td>
                                </tr>
                                <!-- Open actions will be loaded here -->
                            </tbody>
                        </table>

                        <!-- Closed Actions Table -->
                        <h5>Closed Actions</h5>
                        <table id="closed-actions-table" class="table table-striped">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Contact</th>
                                    <th>Action</th>
                                    <th>Action Date</th>
                                    <th>Owner</th>
                                    <th>Status</th>
                                    <th>Notes <span id="notes-badge-container"></span></th>
                                </tr>
                            </thead>
                            <tbody id="closed-actions-tbody">
                                <!-- Closed actions will be loaded here -->
                            </tbody>
                        </table>
                    </div>

                    <div id="no-actions-message" class="text-center" style="display: none;">
                        <p>No actions found for this account</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Action creation is now handled inline in the table -->

<!-- Notes Modal -->
<div class="modal fade" id="notesModal" tabindex="-1" aria-labelledby="notesModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="notesModalLabel">Action Notes</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <textarea id="notes-content" class="form-control" rows="5"></textarea>
                <input type="hidden" id="action-id-for-notes">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="save-notes-btn">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Action Close Confirmation Modal removed as per requirements -->
{% endblock %}

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize both notes badge containers to be empty
        const closedBadgeContainer = document.getElementById('notes-badge-container');
        if (closedBadgeContainer) {
            closedBadgeContainer.innerHTML = '';
        }

        const openBadgeContainer = document.getElementById('open-notes-badge-container');
        if (openBadgeContainer) {
            openBadgeContainer.innerHTML = '';
        }

        // Variables for sorting
        let currentSortColumn = 'nextStepDate';
        let currentSortDirection = 'asc';

        // Add click event listeners to sortable headers
        document.querySelectorAll('th.sortable').forEach(header => {
            header.style.cursor = 'pointer';
            // Add sort indicators
            header.innerHTML += ' <span class="sort-indicator"></span>';

            header.addEventListener('click', function() {
                const sortColumn = this.getAttribute('data-sort');

                // Toggle sort direction if clicking the same column
                if (sortColumn === currentSortColumn) {
                    currentSortDirection = currentSortDirection === 'asc' ? 'desc' : 'asc';
                } else {
                    currentSortColumn = sortColumn;
                    currentSortDirection = 'asc';
                }

                // Update sort indicators
                document.querySelectorAll('.sort-indicator').forEach(indicator => {
                    indicator.textContent = '';
                });

                const indicator = this.querySelector('.sort-indicator');
                indicator.textContent = currentSortDirection === 'asc' ? '▲' : '▼';

                // Fetch and sort accounts
                fetch('/accounts/list-ajax')
                    .then(response => response.json())
                    .then(data => {
                        // Sort the data
                        data.sort((a, b) => {
                            let valueA, valueB;

                            // Handle different column types
                            if (sortColumn === 'nextStepDate') {
                                // Convert dates to timestamps for comparison
                                valueA = a.nextStepDateRaw ? new Date(a.nextStepDateRaw + 'T00:00:00').getTime() : Number.MAX_SAFE_INTEGER;
                                valueB = b.nextStepDateRaw ? new Date(b.nextStepDateRaw + 'T00:00:00').getTime() : Number.MAX_SAFE_INTEGER;
                            } else if (sortColumn === 'id') {
                                valueA = parseInt(a.id);
                                valueB = parseInt(b.id);
                            } else {
                                // For text columns
                                valueA = (a[sortColumn] || '').toString().toLowerCase();
                                valueB = (b[sortColumn] || '').toString().toLowerCase();
                            }

                            // Compare values based on sort direction
                            if (currentSortDirection === 'asc') {
                                return valueA > valueB ? 1 : valueA < valueB ? -1 : 0;
                            } else {
                                return valueA < valueB ? 1 : valueA > valueB ? -1 : 0;
                            }
                        });

                        // Update the table with sorted data
                        updateAccountsTable(data);

                        // Ensure the current account remains selected
                        if (currentAccountId) {
                            const selectedRow = document.querySelector(`.account-row[data-account-id="${currentAccountId}"]`);
                            if (selectedRow) {
                                selectedRow.classList.add('table-primary');
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching accounts for sorting:', error);
                    });
            });
        });

        // Set initial sort indicator and trigger sorting on page load
        const nextStepDateHeader = document.querySelector('th.sortable[data-sort="nextStepDate"]');
        if (nextStepDateHeader) {
            nextStepDateHeader.querySelector('.sort-indicator').textContent = '▲';

            // Fetch and sort accounts by nextStepDate on page load
            fetch('/accounts/list-ajax')
                .then(response => response.json())
                .then(data => {
                    // Sort the data by nextStepDate in ascending order
                    data.sort((a, b) => {
                        const valueA = a.nextStepDateRaw ? new Date(a.nextStepDateRaw + 'T00:00:00').getTime() : Number.MAX_SAFE_INTEGER;
                        const valueB = b.nextStepDateRaw ? new Date(b.nextStepDateRaw + 'T00:00:00').getTime() : Number.MAX_SAFE_INTEGER;
                        return valueA - valueB;
                    });

                    // Update the table with sorted data
                    updateAccountsTable(data);
                })
                .catch(error => {
                    console.error('Error fetching accounts for initial sorting:', error);
                });
        }
        // Function to update the notes badges for both open and closed actions
        function updateNotesBadge(actions) {
            const openBadgeContainer = document.getElementById('open-notes-badge-container');
            const closedBadgeContainer = document.getElementById('notes-badge-container');

            if (!openBadgeContainer || !closedBadgeContainer) return;

            // Separate actions into open and closed
            const openActions = actions.filter(action => !action.closed);
            const closedActions = actions.filter(action => action.closed);

            // Count non-empty notes for open actions
            const openNonEmptyNotesCount = openActions.filter(action => action.notes && action.notes.trim() !== '').length;

            // Count non-empty notes for closed actions
            const closedNonEmptyNotesCount = closedActions.filter(action => action.notes && action.notes.trim() !== '').length;

            // Update the open actions badge
            if (openNonEmptyNotesCount > 0) {
                openBadgeContainer.innerHTML = `<span class="notes-badge">${openNonEmptyNotesCount}</span>`;
            } else {
                openBadgeContainer.innerHTML = '';
            }

            // Update the closed actions badge
            if (closedNonEmptyNotesCount > 0) {
                closedBadgeContainer.innerHTML = `<span class="notes-badge">${closedNonEmptyNotesCount}</span>`;
            } else {
                closedBadgeContainer.innerHTML = '';
            }
        }

        // Function to show notifications
        function showNotification(message, type = 'danger', duration = 5000) {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type} alert-dismissible fade show`;
            notification.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;

            const container = document.getElementById('notification-container');
            container.appendChild(notification);

            // Auto-dismiss after duration
            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => {
                    container.removeChild(notification);
                }, 300); // Wait for fade out animation
            }, duration);
        }

        // Initialize the notes modal
        const notesModal = new bootstrap.Modal(document.getElementById('notesModal'));

        // Add event delegation for notes icons
        document.addEventListener('click', function(e) {
            if (e.target && e.target.classList.contains('notes-icon')) {
                const notes = e.target.getAttribute('data-notes');
                const actionId = e.target.getAttribute('data-action-id');
                const notesContent = document.getElementById('notes-content');
                const actionIdInput = document.getElementById('action-id-for-notes');

                // Set the notes content in the modal
                notesContent.value = notes || '';
                actionIdInput.value = actionId;

                // Show the modal
                notesModal.show();
            }
        });

        // Handle save notes button click
        document.getElementById('save-notes-btn').addEventListener('click', function() {
            const actionId = document.getElementById('action-id-for-notes').value;
            const notes = document.getElementById('notes-content').value;

            // Send request to update notes
            fetch(`/actions/${actionId}/update-notes`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `notes=${encodeURIComponent(notes)}`
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Close the modal
                notesModal.hide();

                // Find the action in our stored actions array
                const actionIndex = allAccountActions.findIndex(a => a.id == actionId);
                if (actionIndex !== -1) {
                    // Update the action in our stored array
                    allAccountActions[actionIndex].notes = data.notes;

                    // Find the notes icon for this action
                    const notesIcon = document.querySelector(`.notes-icon[data-action-id="${actionId}"]`);
                    if (notesIcon) {
                        // Update the icon color based on whether there are notes
                        if (data.notes && data.notes.trim() !== '') {
                            notesIcon.style.color = 'red';
                        } else {
                            notesIcon.style.color = '';
                        }

                        // Update the data-notes attribute
                        notesIcon.setAttribute('data-notes', data.notes || '');
                    }
                }

                // Update the notes badge
                updateNotesBadge(allAccountActions);
            })
            .catch(error => {
                console.error('Error updating notes:', error);
                showNotification('Error updating notes. Please try again.', 'danger');
            });
        });

        // Get all account rows - using a function to always get the current set
        const getAccountRows = () => document.querySelectorAll('.account-row');
        const actionsSection = document.getElementById('actions-section');
        const actionsTbody = document.getElementById('actions-tbody');
        const noActionsMessage = document.getElementById('no-actions-message');
        const createActionBtn = document.getElementById('create-action-btn');

        // Function to update the accounts table with new data
        function updateAccountsTable(accounts) {
            // Get the accounts table body
            const accountsTableBody = document.querySelector('.table-striped tbody');

            // Save the form row if it exists
            const formRow = document.getElementById('account-form-row');
            const formRowDisplay = formRow ? formRow.style.display : 'none';

            // Get all current account rows
            const currentAccountRows = document.querySelectorAll('.account-row');

            // Remove all current account rows
            currentAccountRows.forEach(row => {
                row.remove();
            });

            // Re-add the form row if it exists
            if (formRow) {
                accountsTableBody.appendChild(formRow);
                formRow.style.display = formRowDisplay;
            }

            // Add the updated account rows
            accounts.forEach(account => {
                const row = document.createElement('tr');
                row.className = 'account-row';
                row.setAttribute('data-account-id', account.id);
                row.style.cursor = 'pointer';

                // Check if this is the currently selected account
                if (currentAccountId && currentAccountId == account.id) {
                    row.classList.add('table-primary');
                }

                // Apply action styling based on next action date
                if (account.nextStepDateRaw) {
                    // Parse dates ensuring they're treated as local dates
                    const [year, month, day] = account.nextStepDateRaw.split('-').map(Number);
                    const actionDate = new Date(year, month - 1, day); // month is 0-indexed in JS Date

                    const today = new Date();
                    today.setHours(0, 0, 0, 0); // Set to beginning of day

                    // Calculate days difference
                    const timeDiff = actionDate.getTime() - today.getTime();
                    const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));

                    // First check if action is overdue (in the past)
                    if (daysDiff < 0) {
                        // Overdue actions (past dates)
                        row.classList.add('action-overdue');
                    }
                    // Only if not overdue, check if it's upcoming
                    else if (daysDiff <= 7) {
                        // Upcoming actions (today or within next 7 days)
                        row.classList.add('action-upcoming');
                    }
                }

                row.innerHTML = `
                    <td>${account.id}</td>
                    <td class="editable" data-field="name" data-account-id="${account.id}">${account.name}</td>
                    <td data-date="${account.nextStepDateRaw || ''}">${account.nextStepDateFormatted || ''}</td>
                    <td>${account.actionOwner || ''}</td>
                    <td>
                        <a href="/accounts/${account.id}/edit" class="btn btn-sm btn-outline-success">
                            <i class="fas fa-edit"></i> Edit
                        </a>
                    </td>
                `;

                accountsTableBody.appendChild(row);

                // Add click event listener to the new row
                row.addEventListener('click', function(e) {
                    if (!e.target.closest('button') && !isEditing) {
                        // Remove active class from all rows
                        document.querySelectorAll('.account-row').forEach(r => r.classList.remove('table-primary'));

                        // Add active class to clicked row
                        this.classList.add('table-primary');

                        // Get account ID and update currentAccountId
                        const accountId = this.getAttribute('data-account-id');
                        currentAccountId = accountId;

                        // Load account actions for the clicked account
                        loadAccountActions(accountId);
                    }
                });
            });
        }

        // Load users for the action owner dropdown
        function loadUsers() {
            fetch('/api/users')
                .then(response => response.json())
                .then(data => {
                    const ownerSelect = document.getElementById('action-owner');
                    // Clear existing options except the first one
                    while (ownerSelect.options.length > 1) {
                        ownerSelect.remove(1);
                    }

                    // Add users to dropdown
                    data.forEach(user => {
                        const option = document.createElement('option');
                        option.value = user.id;
                        option.textContent = user.username;
                        ownerSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading users:', error);
                });
        }

        // Load users when the page loads
        loadUsers();

        // Handle create account button click
        const createAccountBtn = document.getElementById('create-account-btn');
        const accountFormRow = document.getElementById('account-form-row');
        const saveAccountBtn = document.getElementById('save-account-btn');
        const cancelAccountBtn = document.getElementById('cancel-account-btn');

        if (createAccountBtn) {
            // Show the form row when Create Account button is clicked
            createAccountBtn.addEventListener('click', function() {
                // Show the form row
                accountFormRow.style.display = 'table-row';

                // Focus on the name input
                document.getElementById('account-name').focus();
            });

            // Handle cancel button
            cancelAccountBtn.addEventListener('click', function() {
                // Hide the form row
                accountFormRow.style.display = 'none';

                // Reset form fields
                document.getElementById('account-name').value = '';
            });

            // Handle save button
            saveAccountBtn.addEventListener('click', function() {
                // Validate required fields
                const name = document.getElementById('account-name').value;
                if (!name) {
                    alert('Name is required');
                    return;
                }

                // Create FormData object
                const formData = new FormData();
                formData.append('name', document.getElementById('account-name').value);

                // Send request to create account
                fetch('/accounts/create-ajax', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Hide the form row
                    accountFormRow.style.display = 'none';

                    // Reset form fields
                    document.getElementById('account-name').value = '';

                    // Add the new account to the table
                    const row = document.createElement('tr');
                    row.className = 'account-row';
                    row.setAttribute('data-account-id', data.id);
                    row.style.cursor = 'pointer';
                    row.innerHTML = `
                        <td>${data.id}</td>
                        <td class="editable" data-field="name" data-account-id="${data.id}">${data.name}</td>
                        <td></td>
                        <td></td>
                        <td>${data.actionOwner || ''}</td>
                        <td>
                            <a href="/accounts/${data.id}/edit" class="btn btn-sm btn-outline-success">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                        </td>
                    `;

                    // Add the new row after the form row
                    if (accountFormRow.nextSibling) {
                        accountFormRow.parentNode.insertBefore(row, accountFormRow.nextSibling);
                    } else {
                        accountFormRow.parentNode.appendChild(row);
                    }

                    // Attach event listeners to the new row
                    row.addEventListener('click', function(e) {
                        if (!e.target.closest('button') && !isEditing) {
                            // Remove active class from all rows
                            document.querySelectorAll('.account-row').forEach(r => r.classList.remove('table-primary'));

                            // Add active class to clicked row
                            this.classList.add('table-primary');

                            // Get account ID and name
                            const accountId = this.getAttribute('data-account-id');
                            const accountName = this.querySelector('td[data-field="name"]').textContent;
                            currentAccountId = accountId;

                            // Update the actions header - new account has no actions
                            const actionsHeader = document.getElementById('actions-header');
                            if (actionsHeader) {
                                actionsHeader.textContent = `Actions for ${accountName} (No action expected)`;
                            }

                            // Hide placeholder and enable create action button
                            document.getElementById('actions-placeholder').style.display = 'none';
                            document.getElementById('create-action-btn').disabled = false;

                            // Show actions table container
                            document.getElementById('actions-table-container').style.display = 'block';

                            // Show no actions message since this is a new account
                            noActionsMessage.style.display = 'block';

                            // Clear any existing actions
                            allAccountActions = [];

                            // Save the form row
                            const formRow = document.getElementById('action-form-row');
                            const formRowDisplay = formRow.style.display;

                            // Clear previous actions
                            actionsTbody.innerHTML = '';

                            // Re-add the form row to the tbody
                            actionsTbody.appendChild(formRow);
                            formRow.style.display = formRowDisplay;
                        }
                    });
                })
                .catch(error => {
                    console.error('Error creating account:', error);
                    alert('Error creating account. Please try again.');
                });
            });
        }

        // Get all editable cells
        const editableCells = document.querySelectorAll('.editable');

        // Variable to track if we're currently editing a cell
        let isEditing = false;

        let currentAccountId = null;

        // Function to handle inline editing
        function setupInlineEditing() {
            // We no longer add click event listeners to cells directly
            // Instead, cells will only be editable when the edit button is clicked
            // The actual editing functionality is now moved to makeRowEditable function
        }

        // Function to make a row's cells editable
        function makeRowEditable(accountId) {
            if (isEditing) return;

            const row = document.querySelector(`.account-row[data-account-id="${accountId}"]`);
            const editableCellsInRow = row.querySelectorAll('.editable');

            // Add editing class to the row
            row.classList.add('editing');

            // Make the first cell editable
            if (editableCellsInRow.length > 0) {
                makeFieldEditable(editableCellsInRow[0]);
            }
        }

        // Function to make a specific field editable
        function makeFieldEditable(cell) {
            isEditing = true;

            const field = cell.getAttribute('data-field');
            const accountId = cell.getAttribute('data-account-id');
            const currentValue = cell.textContent.trim();
            const cellType = cell.getAttribute('data-type') || 'text';

            // Store original content to restore if editing is cancelled
            cell.setAttribute('data-original-content', cell.innerHTML);

            // Create input element based on cell type
            let inputElement;

            if (cellType === 'select') {
                // Create select dropdown for fields like priority
                inputElement = document.createElement('select');
                inputElement.className = 'form-control form-control-sm';

                // Get options from data attribute
                const options = JSON.parse(cell.getAttribute('data-options'));

                // Add options to select
                for (const [value, label] of Object.entries(options)) {
                    const option = document.createElement('option');
                    option.value = value;
                    option.textContent = label;
                    if (currentValue === value) {
                        option.selected = true;
                    }
                    inputElement.appendChild(option);
                }
            } else {
                // Create text input for other fields
                inputElement = document.createElement('input');
                inputElement.type = 'text';
                inputElement.className = 'form-control form-control-sm';
                inputElement.value = currentValue;
            }

            // Clear the cell and add the input
            cell.innerHTML = '';
            cell.appendChild(inputElement);

            // Focus the input
            inputElement.focus();

            // Handle input blur (save on focus out)
            inputElement.addEventListener('blur', function() {
                saveEdit(cell, accountId, field, this.value);
            });

            // Handle Enter key press
            inputElement.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    saveEdit(cell, accountId, field, this.value);
                } else if (e.key === 'Escape') {
                    cancelEdit(cell);
                }
            });
        }

        // Function to save edited value
        function saveEdit(cell, accountId, field, value) {
            // Create form data
            const formData = new FormData();
            formData.append('field', field);
            formData.append('value', value);

            // Send update request
            fetch(`/accounts/${accountId}/update`, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Update cell with new value
                cell.textContent = value;

                // Find the next editable cell in the row
                const row = cell.closest('.account-row');
                const editableCells = Array.from(row.querySelectorAll('.editable'));
                const currentIndex = editableCells.indexOf(cell);
                const nextCell = editableCells[currentIndex + 1];

                // If there's a next cell, make it editable
                if (nextCell) {
                    makeFieldEditable(nextCell);
                } else {
                    // If this was the last cell, we're done editing
                    isEditing = false;

                    // Remove editing class from the row
                    const row = cell.closest('.account-row');
                    row.classList.remove('editing');
                }
            })
            .catch(error => {
                console.error('Error updating account:', error);
                // Restore original content
                cancelEdit(cell);
                alert('Error updating account. Please try again.');
            });
        }

        // Function to cancel editing
        function cancelEdit(cell) {
            cell.innerHTML = cell.getAttribute('data-original-content');
            isEditing = false;

            // Remove editing class from the row
            const row = cell.closest('.account-row');
            if (row) {
                row.classList.remove('editing');
            }
        }

        // Initialize inline editing
        setupInlineEditing();


        // Variable to store all actions for the current account
        let allAccountActions = [];

        // Function to load actions for a specific account
        function loadAccountActions(accountId) {
            if (!accountId) {
                console.error('No account ID provided');
                return;
            }

            // Get account name from the row
            const accountRow = document.querySelector(`.account-row[data-account-id="${accountId}"]`);
            const accountName = accountRow ? accountRow.querySelector('td[data-field="name"]').textContent : 'Unknown Account';

            // Set the initial actions header with the account name
            // The count of open actions will be added when the actions are loaded
            const actionsHeader = document.getElementById('actions-header');
            if (actionsHeader) {
                actionsHeader.textContent = `Actions for ${accountName}`;
            }

            // Hide placeholder and enable create action button
            document.getElementById('actions-placeholder').style.display = 'none';
            document.getElementById('create-action-btn').disabled = false;

            // Show actions table container
            document.getElementById('actions-table-container').style.display = 'block';

            // Fetch contacts for this account
            fetch(`/accounts/${accountId}/contacts`)
                .then(response => response.json())
                .then(contacts => {
                    // Populate the contacts dropdown
                    const contactSelect = document.getElementById('action-contact');
                    contactSelect.innerHTML = '<option value="">Select Contact</option>';

                    if (contacts && contacts.length > 0) {
                        contacts.forEach(contact => {
                            const option = document.createElement('option');
                            option.value = contact;
                            option.textContent = contact;
                            contactSelect.appendChild(option);
                        });
                    } else {
                        // If no contacts, add a default option
                        const option = document.createElement('option');
                        option.value = "No contacts available";
                        option.textContent = "No contacts available";
                        contactSelect.appendChild(option);
                    }
                })
                .catch(error => {
                    console.error('Error fetching contacts:', error);
                });

            // Fetch actions for this account
            fetch(`/accounts/${accountId}/actions`)
                .then(response => response.json())
                .then(data => {
                    // Store all actions (already sorted by createdAt DESC from the server)
                    allAccountActions = data;

                    // Update the notes badge
                    updateNotesBadge(data);

                    if (data.length > 0) {
                        // Hide no actions message
                        noActionsMessage.style.display = 'none';

                        // Show all actions
                        renderActions(data);
                    } else {
                        // Show no actions message
                        noActionsMessage.style.display = 'block';

                        // Clear the notes badge
                        const badgeContainer = document.getElementById('notes-badge-container');
                        if (badgeContainer) {
                            badgeContainer.innerHTML = '';
                        }

                        // Save the form row
                        const formRow = document.getElementById('action-form-row');
                        const formRowDisplay = formRow.style.display;

                        // Clear previous actions
                        actionsTbody.innerHTML = '';

                        // Re-add the form row to the tbody
                        actionsTbody.appendChild(formRow);
                        formRow.style.display = formRowDisplay;
                    }
                })
                .catch(error => {
                    console.error('Error fetching actions:', error);

                    // Save the form row
                    const formRow = document.getElementById('action-form-row');
                    const formRowDisplay = formRow.style.display;

                    // Clear previous actions
                    actionsTbody.innerHTML = '';

                    // Re-add the form row to the tbody
                    actionsTbody.appendChild(formRow);
                    formRow.style.display = formRowDisplay;

                    noActionsMessage.style.display = 'block';
                    noActionsMessage.innerHTML = '<p>Error loading actions. Please try again.</p>';
                });
        }

        // Function to render actions in the tables
        function renderActions(actions) {
            // Save the form row
            const formRow = document.getElementById('action-form-row');
            const formRowDisplay = formRow.style.display;

            // Get references to both table bodies
            const openActionsTbody = document.getElementById('open-actions-tbody');
            const closedActionsTbody = document.getElementById('closed-actions-tbody');

            // Clear previous actions from both tables
            openActionsTbody.innerHTML = '';
            closedActionsTbody.innerHTML = '';

            // Re-add the form row to the open actions tbody
            openActionsTbody.appendChild(formRow);
            formRow.style.display = formRowDisplay;

            // Separate actions into open and closed
            const openActions = actions.filter(action => !action.closed);
            const closedActions = actions.filter(action => action.closed);

            // Sort open actions by date in ascending order (soonest first)
            openActions.sort((a, b) => {
                const dateA = a.nextStepDateRaw ? new Date(a.nextStepDateRaw + 'T00:00:00') : new Date(9999, 11, 31);
                const dateB = b.nextStepDateRaw ? new Date(b.nextStepDateRaw + 'T00:00:00') : new Date(9999, 11, 31);
                return dateA - dateB;
            });

            // Sort closed actions by dateClosed in descending order (most recently closed first)
            closedActions.sort((a, b) => {
                const dateA = a.dateClosed ? new Date(a.dateClosed) : new Date(0);
                const dateB = b.dateClosed ? new Date(b.dateClosed) : new Date(0);
                return dateB - dateA;
            });

            // Update the actions header with open actions count
            const openCount = openActions.length;
            const actionsHeader = document.getElementById('actions-header');
            if (actionsHeader) {
                const accountName = actionsHeader.textContent.split('(')[0].trim();
                if (openCount > 0) {
                    actionsHeader.textContent = `${accountName} (${openCount} Open)`;
                } else {
                    actionsHeader.textContent = `${accountName} (No action expected)`;
                }
            }

            // Add open actions to the open actions table
            openActions.forEach(action => {
                const row = createActionRow(action);
                openActionsTbody.appendChild(row);
            });

            // Add closed actions to the closed actions table
            closedActions.forEach(action => {
                const row = createActionRow(action);
                closedActionsTbody.appendChild(row);
            });

            // Show the actions table container and hide the placeholder
            document.getElementById('actions-table-container').style.display = 'block';
            document.getElementById('actions-placeholder').style.display = 'none';
        }

        // Helper function to create an action row
        function createActionRow(action) {
            const row = document.createElement('tr');

            // Check action status and apply appropriate class
            if (action.closed) {
                // Closed actions - this styling takes precedence over date-based styling
                row.classList.add('action-closed');
            } else {
                // For non-closed actions, check if action is overdue or upcoming
                if (action.nextStepDateRaw) {
                    // Parse dates ensuring they're treated as local dates
                    const [year, month, day] = action.nextStepDateRaw.split('-').map(Number);
                    const actionDate = new Date(year, month - 1, day); // month is 0-indexed in JS Date

                    const today = new Date();
                    today.setHours(0, 0, 0, 0); // Set to beginning of day

                    // Calculate days difference
                    const timeDiff = actionDate.getTime() - today.getTime();
                    const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));

                    // First check if action is overdue (in the past)
                    if (daysDiff < 0) {
                        // Overdue actions (past dates only)
                        row.classList.add('action-overdue');
                    }
                    // Only if not overdue, check if it's upcoming
                    else if (daysDiff <= 7) {
                        // Upcoming actions (today or within next 7 days)
                        row.classList.add('action-upcoming');
                    }
                }
            }

            // Set data attribute for action ID
            row.setAttribute('data-action-id', action.id);

            // Check if action has notes
            const hasNotes = action.notes && action.notes.trim() !== '';

            // Different HTML structure for open vs closed actions
            if (action.closed) {
                // Closed actions - no Actions column
                row.innerHTML = `
                    <td>${action.id}</td>
                    <td>${action.contact || ''}</td>
                    <td>${action.title}</td>
                    <td>${action.nextStepDateFormatted || ''}</td>
                    <td>${action.owner}</td>
                    <td>
                        <div class="form-check">
                            <input class="form-check-input action-closed-checkbox" type="checkbox"
                                   ${action.closed ? 'checked' : ''}
                                   data-action-id="${action.id}">
                            ${action.closed && action.dateClosed ? `<div style="font-size: 0.8em; margin-top: 2px;">${action.dateClosed}</div>` : ''}
                        </div>
                    </td>
                    <td class="text-center">
                        <i class="fas fa-pencil-alt notes-icon" style="cursor: pointer; ${hasNotes ? 'color: red;' : ''}" data-action-id="${action.id}" data-notes="${action.notes ? action.notes.replace(/"/g, '&quot;') : ''}"></i>
                    </td>
                `;
            } else {
                // Open actions - include Actions column
                row.innerHTML = `
                    <td>${action.id}</td>
                    <td class="action-contact-cell" data-action-id="${action.id}">
                        <span>${action.contact || ''}</span>
                        ${action.closed ? '' :
                            `<i class="fas fa-pencil-alt edit-contact-btn ms-2" style="cursor: pointer;"
                                data-action-id="${action.id}"></i>`
                        }
                    </td>
                    <td class="action-title-cell" data-action-id="${action.id}">
                        <span>${action.title}</span>
                        ${action.closed ? '' :
                            `<i class="fas fa-pencil-alt edit-title-btn ms-2" style="cursor: pointer;"
                                data-action-id="${action.id}"></i>`
                        }
                    </td>
                    <td class="action-date-cell" data-action-id="${action.id}">
                        <span>${action.nextStepDateFormatted || ''}</span>
                        ${action.closed ? '' :
                            `<i class="fas fa-pencil-alt edit-date-btn ms-2" style="cursor: pointer;"
                                data-action-id="${action.id}"></i>`
                        }
                    </td>
                    <td class="action-owner-cell" data-action-id="${action.id}" data-owner-id="${action.ownerId || ''}">
                        <span>${action.owner}</span>
                        ${action.closed ? '' :
                            `<i class="fas fa-pencil-alt edit-owner-btn ms-2" style="cursor: pointer;"
                                data-action-id="${action.id}"></i>`
                        }
                    </td>
                    <td>
                        <div class="form-check">
                            <input class="form-check-input action-closed-checkbox" type="checkbox"
                                   ${action.closed ? 'checked' : ''}
                                   data-action-id="${action.id}">
                            ${action.closed && action.dateClosed ? `<div style="font-size: 0.8em; margin-top: 2px;">${action.dateClosed}</div>` : ''}
                        </div>
                    </td>
                    <td></td>
                    <td class="text-center">
                        <i class="fas fa-pencil-alt notes-icon" style="cursor: pointer; ${hasNotes ? 'color: red;' : ''}" data-action-id="${action.id}" data-notes="${action.notes ? action.notes.replace(/"/g, '&quot;') : ''}"></i>
                    </td>
                `;
            }
            return row;
        }

        // Add click event listener to each account row
        getAccountRows().forEach(row => {
            row.addEventListener('click', function(e) {
                // If we're editing, don't trigger row selection
                if (isEditing) {
                    return;
                }

                // Remove active class from all rows
                document.querySelectorAll('.account-row').forEach(r => r.classList.remove('table-primary'));

                // Add active class to clicked row
                this.classList.add('table-primary');

                // Get account ID from data attribute
                const accountId = this.getAttribute('data-account-id');
                currentAccountId = accountId;

                // Load account actions
                loadAccountActions(accountId);
            });
        });


        // Confirmation modal and related code removed as per requirements

        // Handle date picker changes
        document.addEventListener('change', function(e) {
            if (e.target && e.target.classList.contains('action-date-picker')) {
                const actionId = e.target.getAttribute('data-action-id');
                const newDate = e.target.value;
                const originalDate = e.target.getAttribute('data-original-date');

                // If date hasn't changed, do nothing
                if (newDate === originalDate) {
                    return;
                }

                // Disable the input while processing
                e.target.disabled = true;

                // Find the row
                const row = e.target.closest('tr');
                if (!row) {
                    console.error('Row not found for action ID:', actionId);
                    e.target.disabled = false;
                    return;
                }

                // Add a visual indicator that the action is being processed
                const originalOpacity = row.style.opacity || '1';
                row.style.opacity = '0.7';

                // Send request to update the date
                fetch(`/actions/${actionId}/update-date`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    body: `date=${encodeURIComponent(newDate)}`
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Update the action in our stored array
                    const actionIndex = allAccountActions.findIndex(a => a.id == actionId);
                    if (actionIndex !== -1) {
                        allAccountActions[actionIndex] = data;
                    }

                    // Update the data-original-date attribute
                    e.target.setAttribute('data-original-date', newDate);

                    // Re-render all actions to ensure proper sorting
                    renderActions(allAccountActions);

                    // Show success notification
                    showNotification(`Action date updated successfully`, 'success', 3000);

                    // Refresh the accounts list to reflect the updated next action date
                    fetch('/accounts/list-ajax')
                        .then(response => response.json())
                        .then(data => {
                            // Update the accounts table with the new data
                            updateAccountsTable(data);

                            // Ensure the current account remains selected and clickable
                            const selectedRow = document.querySelector(`.account-row[data-account-id="${currentAccountId}"]`);
                            if (selectedRow) {
                                selectedRow.classList.add('table-primary');
                            }

                            // Reattach event listeners to all account rows
                            getAccountRows().forEach(row => {
                                // Remove existing event listeners (to avoid duplicates)
                                const newRow = row.cloneNode(true);
                                row.parentNode.replaceChild(newRow, row);

                                // Add click event listener to the new row
                                newRow.addEventListener('click', function(e) {
                                    // If we're editing, don't trigger row selection
                                    if (isEditing) {
                                        return;
                                    }

                                    // Remove active class from all rows
                                    document.querySelectorAll('.account-row').forEach(r => r.classList.remove('table-primary'));

                                    // Add active class to clicked row
                                    this.classList.add('table-primary');

                                    // Get account ID from data attribute
                                    const accountId = this.getAttribute('data-account-id');
                                    currentAccountId = accountId;

                                    // Load account actions
                                    loadAccountActions(accountId);
                                });
                            });
                        })
                        .catch(error => {
                            console.error('Error refreshing accounts list:', error);
                        });
                })
                .catch(error => {
                    console.error('Error updating action date:', error);
                    showNotification('Error updating action date. Please try again.', 'danger');

                    // Reset to original date
                    e.target.value = originalDate;

                    // Re-enable the input and restore opacity
                    e.target.disabled = false;
                    row.style.opacity = originalOpacity;
                });
            }
        });

        // Handle Edit Date Button Click
        document.addEventListener('click', function(e) {
            const editBtn = e.target.closest('.edit-date-btn');
            if (!editBtn) return;

            const actionId = editBtn.getAttribute('data-action-id');
            const cell = editBtn.closest('.action-date-cell');
            const dateSpan = cell.querySelector('span');
            const currentDate = dateSpan.textContent.trim();

            // Create a date input
            const dateInput = document.createElement('input');
            dateInput.type = 'date';
            dateInput.className = 'form-control action-date-picker';
            dateInput.setAttribute('data-action-id', actionId);

            // Try to convert the formatted date to YYYY-MM-DD for the input
            try {
                // Parse the date correctly based on the displayed format (DD/MM/YYYY)
                const dateParts = currentDate.split('/');
                if (dateParts.length === 3) {
                    // Assuming format is DD/MM/YYYY
                    const day = dateParts[0];
                    const month = dateParts[1];
                    const year = dateParts[2];

                    // Create ISO 8601 format (YYYY-MM-DD)
                    const isoDate = `${year}-${month}-${day}`;
                    dateInput.value = isoDate;
                    dateInput.setAttribute('data-original-date', isoDate);
                } else {
                    // Fallback for other formats
                    const parsedDate = new Date(currentDate);
                    if (!isNaN(parsedDate.getTime())) {
                        const yyyy = parsedDate.getFullYear();
                        const mm = String(parsedDate.getMonth() + 1).padStart(2, '0');
                        const dd = String(parsedDate.getDate()).padStart(2, '0');
                        const isoDate = `${yyyy}-${mm}-${dd}`;
                        dateInput.value = isoDate;
                        dateInput.setAttribute('data-original-date', isoDate);
                    }
                }
            } catch (e) {
                console.error('Error parsing date:', e);
            }

            // Create save and cancel buttons
            const saveBtn = document.createElement('button');
            saveBtn.type = 'button';
            saveBtn.className = 'btn btn-sm btn-success ms-2';
            saveBtn.innerHTML = '<i class="fas fa-check"></i>';

            const cancelBtn = document.createElement('button');
            cancelBtn.type = 'button';
            cancelBtn.className = 'btn btn-sm btn-secondary ms-1';
            cancelBtn.innerHTML = '<i class="fas fa-times"></i>';

            // Hide the current elements
            dateSpan.style.display = 'none';
            editBtn.style.display = 'none';

            // Add the new elements
            cell.appendChild(dateInput);
            cell.appendChild(saveBtn);
            cell.appendChild(cancelBtn);

            // Focus the date input
            dateInput.focus();

            // Function to reset the cell to its original state
            const resetCell = () => {
                dateSpan.style.display = '';
                editBtn.style.display = '';
                dateInput.remove();
                saveBtn.remove();
                cancelBtn.remove();
            };

            // Handle cancel button click
            cancelBtn.addEventListener('click', resetCell);

            // Handle save button click
            saveBtn.addEventListener('click', async () => {
                const newDate = dateInput.value;
                if (!newDate) {
                    // If no date selected, just cancel
                    resetCell();
                    return;
                }

                // Find the row
                const row = cell.closest('tr');
                if (!row) {
                    console.error('Row not found for action ID:', actionId);
                    resetCell();
                    return;
                }

                // Add a visual indicator that the action is being processed
                const originalOpacity = row.style.opacity || '1';
                row.style.opacity = '0.7';

                // Disable the input and buttons while processing
                dateInput.disabled = true;
                saveBtn.disabled = true;
                cancelBtn.disabled = true;

                try {
                    const response = await fetch(`/actions/${actionId}/update-date`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `date=${encodeURIComponent(newDate)}`
                    });

                    if (!response.ok) throw new Error('Network response was not ok');

                    const data = await response.json();

                    // Update the action in our stored array
                    const actionIndex = allAccountActions.findIndex(a => a.id == actionId);
                    if (actionIndex !== -1) {
                        // The server now returns both nextStepDateFormatted and nextStepDateRaw
                        // No need to manually set these properties anymore
                        allAccountActions[actionIndex] = data;
                    }

                    // Update the date span with the new formatted date
                    dateSpan.textContent = data.nextStepDateFormatted || '';

                    // Reset the cell to its original state but with the new date
                    resetCell();

                    // Update the row's class based on the new date
                    // Remove existing date-related classes
                    row.classList.remove('action-overdue', 'action-upcoming');

                    // Add appropriate class based on the new date
                    if (!data.closed && data.nextStepDateRaw) {
                        // Parse dates from the reliable raw date format (YYYY-MM-DD)
                        const [year, month, day] = data.nextStepDateRaw.split('-').map(Number);
                        const actionDate = new Date(year, month - 1, day); // month is 0-indexed in JS Date

                        const today = new Date();
                        today.setHours(0, 0, 0, 0); // Set to beginning of day

                        // Calculate days difference
                        const timeDiff = actionDate.getTime() - today.getTime();
                        const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));

                        // First check if action is overdue (in the past)
                        if (daysDiff < 0) {
                            // Overdue actions (past dates only)
                            row.classList.add('action-overdue');
                        }
                        // Only if not overdue, check if it's upcoming
                        else if (daysDiff <= 7) {
                            // Upcoming actions (today or within next 7 days)
                            row.classList.add('action-upcoming');
                        }
                    }

                    // Show success notification
                    showNotification('Action date updated successfully', 'success');

                    // Refresh the accounts list to reflect the updated next action date
                    // This is done asynchronously in the background
                    fetch('/accounts/list-ajax')
                        .then(response => response.json())
                        .then(data => {
                            // Update the accounts table with the new data
                            updateAccountsTable(data);

                            // Ensure the current account remains selected and clickable
                            const selectedRow = document.querySelector(`.account-row[data-account-id="${currentAccountId}"]`);
                            if (selectedRow) {
                                selectedRow.classList.add('table-primary');
                            }

                            // Reattach event listeners to all account rows
                            getAccountRows().forEach(row => {
                                // Remove existing event listeners (to avoid duplicates)
                                const newRow = row.cloneNode(true);
                                row.parentNode.replaceChild(newRow, row);

                                // Add click event listener to the new row
                                newRow.addEventListener('click', function(e) {
                                    // If we're editing, don't trigger row selection
                                    if (isEditing) {
                                        return;
                                    }

                                    // Remove active class from all rows
                                    document.querySelectorAll('.account-row').forEach(r => r.classList.remove('table-primary'));

                                    // Add active class to clicked row
                                    this.classList.add('table-primary');

                                    // Get account ID from data attribute
                                    const accountId = this.getAttribute('data-account-id');
                                    currentAccountId = accountId;

                                    // Load account actions
                                    loadAccountActions(accountId);
                                });
                            });
                        })
                        .catch(error => {
                            console.error('Error refreshing accounts list:', error);
                        });
                } catch (error) {
                    console.error('Error updating action date:', error);
                    showNotification('Error updating action date. Please try again.', 'danger');

                    // Reset the cell
                    resetCell();

                    // Restore opacity
                    row.style.opacity = originalOpacity;
                }
            });
        });

        // Handle Edit Contact Button Click
        document.addEventListener('click', function(e) {
            const editBtn = e.target.closest('.edit-contact-btn');
            if (!editBtn) return;

            const actionId = editBtn.getAttribute('data-action-id');
            const cell = editBtn.closest('.action-contact-cell');
            const contactSpan = cell.querySelector('span');
            const currentContact = contactSpan.textContent.trim();

            // Create a dropdown for contacts
            const contactSelect = document.createElement('select');
            contactSelect.className = 'form-control';
            contactSelect.setAttribute('data-action-id', actionId);

            // Add a loading option
            const loadingOption = document.createElement('option');
            loadingOption.textContent = 'Loading contacts...';
            contactSelect.appendChild(loadingOption);

            // Get the account ID from the action
            const accountId = currentAccountId;

            // Fetch contacts for this account
            fetch(`/accounts/${accountId}/contacts`)
                .then(response => response.json())
                .then(contacts => {
                    // Clear the loading option
                    contactSelect.innerHTML = '';

                    // Add an empty option
                    const emptyOption = document.createElement('option');
                    emptyOption.value = '';
                    emptyOption.textContent = 'Select Contact';
                    contactSelect.appendChild(emptyOption);

                    // Add options for each contact
                    if (contacts && contacts.length > 0) {
                        contacts.forEach(contact => {
                            const option = document.createElement('option');
                            option.value = contact;
                            option.textContent = contact;
                            // Pre-select the current contact
                            if (contact === currentContact) {
                                option.selected = true;
                            }
                            contactSelect.appendChild(option);
                        });
                    } else {
                        // If no contacts, add a default option
                        const option = document.createElement('option');
                        option.value = "No contacts available";
                        option.textContent = "No contacts available";
                        contactSelect.appendChild(option);
                    }
                })
                .catch(error => {
                    console.error('Error fetching contacts:', error);
                    contactSelect.innerHTML = '<option>Error loading contacts</option>';
                });

            // Create save and cancel buttons
            const saveBtn = document.createElement('button');
            saveBtn.type = 'button';
            saveBtn.className = 'btn btn-sm btn-success ms-2';
            saveBtn.innerHTML = '<i class="fas fa-check"></i>';

            const cancelBtn = document.createElement('button');
            cancelBtn.type = 'button';
            cancelBtn.className = 'btn btn-sm btn-secondary ms-1';
            cancelBtn.innerHTML = '<i class="fas fa-times"></i>';

            // Hide the current elements
            contactSpan.style.display = 'none';
            editBtn.style.display = 'none';

            // Add the new elements
            cell.appendChild(contactSelect);
            cell.appendChild(saveBtn);
            cell.appendChild(cancelBtn);

            // Focus the dropdown
            contactSelect.focus();

            // Function to reset the cell to its original state
            const resetCell = () => {
                contactSpan.style.display = '';
                editBtn.style.display = '';
                contactSelect.remove();
                saveBtn.remove();
                cancelBtn.remove();
            };

            // Handle cancel button click
            cancelBtn.addEventListener('click', resetCell);

            // Handle save button click
            saveBtn.addEventListener('click', async () => {
                const newContact = contactSelect.value;
                if (!newContact) {
                    // If no contact selected, just cancel
                    resetCell();
                    return;
                }

                // Find the row
                const row = cell.closest('tr');
                if (!row) {
                    console.error('Row not found for action ID:', actionId);
                    resetCell();
                    return;
                }

                // Add a visual indicator that the action is being processed
                const originalOpacity = row.style.opacity || '1';
                row.style.opacity = '0.7';

                // Disable the dropdown and buttons while processing
                contactSelect.disabled = true;
                saveBtn.disabled = true;
                cancelBtn.disabled = true;

                try {
                    const response = await fetch(`/actions/${actionId}/update-field`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `fieldName=contact&newValue=${encodeURIComponent(newContact)}`
                    });

                    if (!response.ok) throw new Error('Network response was not ok');

                    const data = await response.json();

                    // Update the action in our stored array
                    const actionIndex = allAccountActions.findIndex(a => a.id == actionId);
                    if (actionIndex !== -1) {
                        allAccountActions[actionIndex] = data;
                    }

                    // Update the contact span with the new value
                    contactSpan.textContent = data.contact || '';

                    // Reset the cell to its original state but with the new contact
                    resetCell();

                    // Show success notification
                    showNotification('Contact updated successfully', 'success');
                } catch (error) {
                    console.error('Error updating contact:', error);
                    showNotification('Error updating contact. Please try again.', 'danger');

                    // Reset the cell
                    resetCell();

                    // Restore opacity
                    row.style.opacity = originalOpacity;
                }
            });
        });

        // Handle Edit Title (Action) Button Click
        document.addEventListener('click', function(e) {
            const editBtn = e.target.closest('.edit-title-btn');
            if (!editBtn) return;

            const actionId = editBtn.getAttribute('data-action-id');
            const cell = editBtn.closest('.action-title-cell');
            const titleSpan = cell.querySelector('span');
            const currentTitle = titleSpan.textContent.trim();

            // Create a text input
            const titleInput = document.createElement('input');
            titleInput.type = 'text';
            titleInput.className = 'form-control';
            titleInput.value = currentTitle;
            titleInput.setAttribute('data-action-id', actionId);

            // Create save and cancel buttons
            const saveBtn = document.createElement('button');
            saveBtn.type = 'button';
            saveBtn.className = 'btn btn-sm btn-success ms-2';
            saveBtn.innerHTML = '<i class="fas fa-check"></i>';

            const cancelBtn = document.createElement('button');
            cancelBtn.type = 'button';
            cancelBtn.className = 'btn btn-sm btn-secondary ms-1';
            cancelBtn.innerHTML = '<i class="fas fa-times"></i>';

            // Hide the current elements
            titleSpan.style.display = 'none';
            editBtn.style.display = 'none';

            // Add the new elements
            cell.appendChild(titleInput);
            cell.appendChild(saveBtn);
            cell.appendChild(cancelBtn);

            // Focus the input
            titleInput.focus();

            // Function to reset the cell to its original state
            const resetCell = () => {
                titleSpan.style.display = '';
                editBtn.style.display = '';
                titleInput.remove();
                saveBtn.remove();
                cancelBtn.remove();
            };

            // Handle cancel button click
            cancelBtn.addEventListener('click', resetCell);

            // Handle save button click
            saveBtn.addEventListener('click', async () => {
                const newTitle = titleInput.value;
                if (!newTitle) {
                    // If no title entered, just cancel
                    resetCell();
                    return;
                }

                // Find the row
                const row = cell.closest('tr');
                if (!row) {
                    console.error('Row not found for action ID:', actionId);
                    resetCell();
                    return;
                }

                // Add a visual indicator that the action is being processed
                const originalOpacity = row.style.opacity || '1';
                row.style.opacity = '0.7';

                // Disable the input and buttons while processing
                titleInput.disabled = true;
                saveBtn.disabled = true;
                cancelBtn.disabled = true;

                try {
                    const response = await fetch(`/actions/${actionId}/update-field`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `fieldName=action&newValue=${encodeURIComponent(newTitle)}`
                    });

                    if (!response.ok) throw new Error('Network response was not ok');

                    const data = await response.json();

                    // Update the action in our stored array
                    const actionIndex = allAccountActions.findIndex(a => a.id == actionId);
                    if (actionIndex !== -1) {
                        allAccountActions[actionIndex] = data;
                    }

                    // Update the title span with the new value
                    titleSpan.textContent = data.title || '';

                    // Reset the cell to its original state but with the new title
                    resetCell();

                    // Show success notification
                    showNotification('Action updated successfully', 'success');
                } catch (error) {
                    console.error('Error updating action title:', error);
                    showNotification('Error updating action. Please try again.', 'danger');

                    // Reset the cell
                    resetCell();

                    // Restore opacity
                    row.style.opacity = originalOpacity;
                }
            });
        });

        // Handle Edit Owner Button Click
        document.addEventListener('click', function(e) {
            const editBtn = e.target.closest('.edit-owner-btn');
            if (!editBtn) return;

            const actionId = editBtn.getAttribute('data-action-id');
            const cell = editBtn.closest('.action-owner-cell');
            const ownerSpan = cell.querySelector('span');
            const currentOwner = ownerSpan.textContent.trim();
            const currentOwnerId = cell.getAttribute('data-owner-id');

            // Create a select dropdown
            const ownerSelect = document.createElement('select');
            ownerSelect.className = 'form-control';
            ownerSelect.setAttribute('data-action-id', actionId);

            // Fetch users to populate the dropdown
            fetch('/api/users')
                .then(response => response.json())
                .then(users => {
                    // Add users to dropdown
                    users.forEach(user => {
                        const option = document.createElement('option');
                        option.value = user.id;
                        option.textContent = user.name || user.username;
                        if (currentOwnerId && user.id == currentOwnerId) {
                            option.selected = true;
                        } else if (!currentOwnerId && (user.name === currentOwner || user.username === currentOwner)) {
                            option.selected = true;
                        }
                        ownerSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading users:', error);
                    resetCell();
                    showNotification('Error loading users. Please try again.', 'danger');
                });

            // Create save and cancel buttons
            const saveBtn = document.createElement('button');
            saveBtn.type = 'button';
            saveBtn.className = 'btn btn-sm btn-success ms-2';
            saveBtn.innerHTML = '<i class="fas fa-check"></i>';

            const cancelBtn = document.createElement('button');
            cancelBtn.type = 'button';
            cancelBtn.className = 'btn btn-sm btn-secondary ms-1';
            cancelBtn.innerHTML = '<i class="fas fa-times"></i>';

            // Hide the current elements
            ownerSpan.style.display = 'none';
            editBtn.style.display = 'none';

            // Add the new elements
            cell.appendChild(ownerSelect);
            cell.appendChild(saveBtn);
            cell.appendChild(cancelBtn);

            // Focus the select
            ownerSelect.focus();

            // Function to reset the cell to its original state
            const resetCell = () => {
                ownerSpan.style.display = '';
                editBtn.style.display = '';
                ownerSelect.remove();
                saveBtn.remove();
                cancelBtn.remove();
            };

            // Handle cancel button click
            cancelBtn.addEventListener('click', resetCell);

            // Handle save button click
            saveBtn.addEventListener('click', async () => {
                const newOwnerId = ownerSelect.value;
                if (!newOwnerId) {
                    // If no owner selected, just cancel
                    resetCell();
                    return;
                }

                // Find the row
                const row = cell.closest('tr');
                if (!row) {
                    console.error('Row not found for action ID:', actionId);
                    resetCell();
                    return;
                }

                // Add a visual indicator that the action is being processed
                const originalOpacity = row.style.opacity || '1';
                row.style.opacity = '0.7';

                // Disable the select and buttons while processing
                ownerSelect.disabled = true;
                saveBtn.disabled = true;
                cancelBtn.disabled = true;

                try {
                    const response = await fetch(`/actions/${actionId}/update-field`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                        },
                        body: `fieldName=owner&newValue=${encodeURIComponent(newOwnerId)}`
                    });

                    if (!response.ok) throw new Error('Network response was not ok');

                    const data = await response.json();

                    // Update the action in our stored array
                    const actionIndex = allAccountActions.findIndex(a => a.id == actionId);
                    if (actionIndex !== -1) {
                        allAccountActions[actionIndex] = data;
                    }

                    // Update the owner span with the new value
                    ownerSpan.textContent = data.owner || '';

                    // Update the data-owner-id attribute
                    cell.setAttribute('data-owner-id', data.ownerId || '');

                    // Reset the cell to its original state but with the new owner
                    resetCell();

                    // Show success notification
                    showNotification('Owner updated successfully', 'success');
                } catch (error) {
                    console.error('Error updating owner:', error);
                    showNotification('Error updating owner. Please try again.', 'danger');

                    // Reset the cell
                    resetCell();

                    // Restore opacity
                    row.style.opacity = originalOpacity;
                }
            });
        });

        // Add event delegation for action closed checkboxes to both tables
        document.addEventListener('change', function(e) {
            if (e.target && e.target.classList.contains('action-closed-checkbox')) {
                const actionId = e.target.getAttribute('data-action-id');
                const isChecked = e.target.checked;

                // Find the row in either table
                const row = document.querySelector(`tr[data-action-id="${actionId}"]`);

                // Disable the checkbox immediately to prevent multiple clicks
                e.target.disabled = true;

                // Add a visual indicator that the action is being processed
                const originalOpacity = row.style.opacity || '1';
                row.style.opacity = '0.7';

                // Find the action in our stored actions array
                const actionIndex = allAccountActions.findIndex(a => a.id == actionId);
                if (actionIndex === -1) {
                    console.error('Action not found in stored actions');
                    // Re-enable the checkbox and restore opacity
                    e.target.disabled = false;
                    row.style.opacity = originalOpacity;
                    return;
                }

                // Directly send request to toggle closed status
                fetch(`/actions/${actionId}/toggle-closed`, {
                    method: 'POST'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Update the action in our stored array
                    allAccountActions[actionIndex] = data;

                    // Remove the row from its current position
                    row.remove();

                    // Re-render all actions to ensure proper sorting and placement
                    renderActions(allAccountActions);

                    // Update the notes badges
                    updateNotesBadge(allAccountActions);

                    // Show a success notification based on the current state
                    if (data.closed) {
                        showNotification(`Action ${data.id} closed successfully`, 'success', 3000);
                    } else {
                        showNotification(`Action ${data.id} reopened successfully`, 'success', 3000);
                    }

                    // Refresh the accounts list
                    fetch('/accounts/list-ajax')
                        .then(response => response.json())
                        .then(data => {
                            // Update the accounts table with the new data
                            updateAccountsTable(data);

                            // Ensure the current account remains selected and clickable
                            const selectedRow = document.querySelector(`.account-row[data-account-id="${currentAccountId}"]`);
                            if (selectedRow) {
                                selectedRow.classList.add('table-primary');
                            }

                            // Reattach event listeners to all account rows
                            getAccountRows().forEach(row => {
                                // Remove existing event listeners (to avoid duplicates)
                                const newRow = row.cloneNode(true);
                                row.parentNode.replaceChild(newRow, row);

                                // Add click event listener to the new row
                                newRow.addEventListener('click', function(e) {
                                    // If we're editing, don't trigger row selection
                                    if (isEditing) {
                                        return;
                                    }

                                    // Remove active class from all rows
                                    document.querySelectorAll('.account-row').forEach(r => r.classList.remove('table-primary'));

                                    // Add active class to clicked row
                                    this.classList.add('table-primary');

                                    // Get account ID from data attribute
                                    const accountId = this.getAttribute('data-account-id');
                                    currentAccountId = accountId;

                                    // Load account actions
                                    loadAccountActions(accountId);
                                });
                            });
                        })
                        .catch(error => {
                            console.error('Error refreshing accounts list:', error);
                        });
                })
                .catch(error => {
                    console.error('Error toggling action status:', error);
                    // Use showNotification instead of alert
                    showNotification('Error updating action. Please try again.', 'danger');
                    // Reset checkbox to its previous state
                    e.target.checked = !isChecked;
                    // Re-enable the checkbox and restore opacity after error
                    e.target.disabled = false;
                    row.style.opacity = originalOpacity;
                });
            }
        });

        // Handle create action button click
        if (createActionBtn) {
            const actionFormRow = document.getElementById('action-form-row');
            const saveActionBtn = document.getElementById('save-action-btn');
            const cancelActionBtn = document.getElementById('cancel-action-btn');

            // Show the form row when Create Action button is clicked
            createActionBtn.addEventListener('click', function() {
                if (!currentAccountId) {
                    alert('Please select an account first');
                    return;
                }

                // Make sure the actions table container is visible
                document.getElementById('actions-table-container').style.display = 'block';
                document.getElementById('actions-placeholder').style.display = 'none';

                // Show the form row
                actionFormRow.style.display = 'table-row';

                // Focus on the title input
                document.getElementById('action-title').focus();
            });

            // Handle cancel button
            cancelActionBtn.addEventListener('click', function() {
                // Hide the form row
                actionFormRow.style.display = 'none';

                // Reset form fields
                document.getElementById('action-title').value = '';
                document.getElementById('action-contact').value = '';
                document.getElementById('action-next-step-date').value = '';
                document.getElementById('action-owner').value = '';

                // If there are no actions, show the no actions message
                if (allAccountActions.length === 0) {
                    noActionsMessage.style.display = 'block';
                }
            });

            // Handle save button
            saveActionBtn.addEventListener('click', function() {
                if (!currentAccountId) {
                    alert('Please select an account first');
                    return;
                }

                // Validate required fields
                const title = document.getElementById('action-title').value;
                if (!title) {
                    alert('Title is required');
                    return;
                }

                const contact = document.getElementById('action-contact').value;
                if (!contact) {
                    alert('Contact is required');
                    return;
                }

                const owner = document.getElementById('action-owner').value;
                if (!owner) {
                    alert('Owner is required');
                    return;
                }

                // Create FormData object
                const formData = new FormData();
                formData.append('title', document.getElementById('action-title').value);
                formData.append('contact', document.getElementById('action-contact').value);
                formData.append('nextStepDate', document.getElementById('action-next-step-date').value);
                formData.append('owner', document.getElementById('action-owner').value);

                // Send request to create action
                fetch(`/accounts/${currentAccountId}/create-action`, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Hide the form row
                    actionFormRow.style.display = 'none';

                    // Reset form fields
                    document.getElementById('action-title').value = '';
                    document.getElementById('action-contact').value = '';
                    document.getElementById('action-next-step-date').value = '';
                    document.getElementById('action-owner').value = '';

                    // Add the new action to our stored actions array and sort by createdAt
                    allAccountActions.push(data);
                    // Sort actions by createdAt in descending order
                    allAccountActions.sort((a, b) => {
                        return new Date(b.createdAt) - new Date(a.createdAt);
                    });

                    // Hide no actions message if it's visible
                    if (noActionsMessage.style.display !== 'none') {
                        noActionsMessage.style.display = 'none';
                    }

                    // Display all actions
                    renderActions(allAccountActions);

                    // Update the notes badge
                    updateNotesBadge(allAccountActions);

                    // Refresh the accounts list to reflect the new action
                    fetch('/accounts/list-ajax')
                        .then(response => response.json())
                        .then(data => {
                            // Update the accounts table with the new data
                            updateAccountsTable(data);

                            // Ensure the current account remains selected and clickable
                            const selectedRow = document.querySelector(`.account-row[data-account-id="${currentAccountId}"]`);
                            if (selectedRow) {
                                selectedRow.classList.add('table-primary');
                            }

                            // Reattach event listeners to all account rows
                            getAccountRows().forEach(row => {
                                // Remove existing event listeners (to avoid duplicates)
                                const newRow = row.cloneNode(true);
                                row.parentNode.replaceChild(newRow, row);

                                // Add click event listener to the new row
                                newRow.addEventListener('click', function(e) {
                                    // If we're editing, don't trigger row selection
                                    if (isEditing) {
                                        return;
                                    }

                                    // Remove active class from all rows
                                    document.querySelectorAll('.account-row').forEach(r => r.classList.remove('table-primary'));

                                    // Add active class to clicked row
                                    this.classList.add('table-primary');

                                    // Get account ID from data attribute
                                    const accountId = this.getAttribute('data-account-id');
                                    currentAccountId = accountId;

                                    // Load account actions
                                    loadAccountActions(accountId);
                                });
                            });
                        })
                        .catch(error => {
                            console.error('Error refreshing accounts list:', error);
                        });
                })
                .catch(error => {
                    console.error('Error creating action:', error);
                    alert('Error creating action. Please try again.');
                });
            });
        }
    });
</script>
{% endblock %}
