{% extends 'base.html.twig' %}

{% block title %}Accounts{% endblock %}

{% block stylesheets %}
<style>
    .editable {
        /* Removed cursor: pointer to indicate cells are not directly editable */
    }

    .editable:hover {
        background-color: #f8f9fa;
        position: relative;
    }

    /* Add style for when row is in edit mode */
    .editing .editable {
        cursor: text;
    }

    /* Action status styling */
    .action-overdue {
        background-color: #ffcccc !important; /* Red background for overdue actions */
    }

    .action-upcoming {
        background-color: #fff2cc !important; /* Yellow background for upcoming actions */
    }

    /* Style for closed actions */
    .action-closed {
        opacity: 0.7;
        background-color: #e6e6e6 !important; /* Gray background for closed actions */
    }

    /* Add strikethrough and italic for text in closed action cells */
    .action-closed td {
        text-decoration: line-through;
        font-style: italic;
    }

    /* Split view layout */
    .split-view-container {
        display: flex;
        flex-wrap: wrap;
    }

    .accounts-column {
        width: 40%;
        padding-right: 15px;
    }

    .actions-column {
        width: 60%;
    }

    /* Responsive design for smaller screens */
    @media (max-width: 992px) {
        .accounts-column, .actions-column {
            width: 100%;
        }

        .accounts-column {
            margin-bottom: 20px;
            padding-right: 0;
        }
    }

    /* Adjust font sizes for better readability */
    .accounts-column .table {
        font-size: 1.05rem;
    }

    /* Empty actions placeholder */
    .actions-placeholder {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 200px;
        background-color: #f8f9fa;
        border-radius: 5px;
        font-size: 1.2rem;
        color: #6c757d;
    }
</style>
{% endblock %}

{% block body %}
<div class="split-view-container mb-4">
    <!-- Left Column: Accounts List (40% width) -->
    <div class="accounts-column">
        <div class="card">
            <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                <h4 class="mb-0">Accounts List</h4>
                <button type="button" class="btn btn-light" id="create-account-btn">
                    <i class="fas fa-plus"></i> Create Account
                </button>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Account Name</th>
                                <th>Next Action</th>
                                <th>Next Action Date</th>
                                <th>Owner</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Form row for creating new account -->
                            <tr id="account-form-row" style="display: none;">
                                <td><i>New</i></td>
                                <td>
                                    <input type="text" class="form-control" id="account-name" name="name" placeholder="Account Name" required>
                                </td>
                                <td>
                                    <input type="text" class="form-control" id="account-contact" name="contact" placeholder="Initial Contact">
                                </td>
                                <td>
                                    <!-- Next Action Date field removed -->
                                </td>
                                <td>
                                    <!-- New account has no actions yet -->
                                </td>
                                <td>
                                    <!-- Owner will be set to current user -->
                                </td>
                                <td>
                                    <button type="button" id="save-account-btn" class="btn btn-sm btn-success text-white">Save</button>
                                    <button type="button" id="cancel-account-btn" class="btn btn-sm btn-secondary">Cancel</button>
                                </td>
                            </tr>
                            {% for account in accounts %}
                                <tr class="account-row" data-account-id="{{ account.id }}" style="cursor: pointer;">
                                    <td>{{ account.id }}</td>
                                    <td class="editable" data-field="name" data-account-id="{{ account.id }}">{{ account.name }}</td>
                                    <td>
                                        {% if nextActions[account.id] is defined %}
                                            {{ nextActions[account.id].title }}
                                        {% endif %}
                                    </td>
                                    <td>
                                        {% if nextActions[account.id] is defined %}
                                            {{ nextActions[account.id].nextStepDate|date('Y-m-d') }}
                                        {% endif %}
                                    </td>
                                    <td>{% if nextActions[account.id] is defined %}{{ nextActions[account.id].owner.username }}{% endif %}</td>
                                    <td>
                                        <a href="{{ path('app_account_edit', {'id': account.id}) }}" class="btn btn-sm btn-outline-success">
                                            <i class="fas fa-edit"></i> Edit
                                        </a>
                                    </td>
                                </tr>
                            {% else %}
                                <tr>
                                    <td colspan="7" class="text-center">No accounts found</td>
                                </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Right Column: Actions View (60% width) -->
    <div class="actions-column">
        <!-- Actions Table Section -->
        <div id="actions-section">
            <div class="card">
                <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
                    <h4 class="mb-0" id="actions-header">Account Actions</h4>
                    <button type="button" class="btn btn-light" id="create-action-btn" disabled>
                        <i class="fas fa-plus"></i> Create Action
                    </button>
                </div>
                <div class="card-body">
                    <!-- Placeholder when no account is selected -->
                    <div id="actions-placeholder" class="actions-placeholder">
                        <p>Select an account to see its actions</p>
                    </div>

                    <!-- Actions table container -->
                    <div id="actions-table-container" style="display: none; max-height: 70vh; overflow-y: auto;">
                        <table id="actions-table" class="table table-striped">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Contact</th>
                                    <th>Action</th>
                                    <th>Action Date</th>
                                    <th>Owner</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                    <th>Notes</th>
                                </tr>
                            </thead>
                            <tbody id="actions-tbody">
                                <!-- Form row for creating new actions -->
                                <tr id="action-form-row" style="display: none;">
                                    <td><i>New</i></td>
                                    <td>
                                        <select class="form-control" id="action-contact" name="contact" required>
                                            <option value="">Select Contact</option>
                                            <!-- Account contacts will be loaded here -->
                                        </select>
                                    </td>
                                    <td>
                                        <input type="text" class="form-control" id="action-title" name="title" placeholder="Title" required>
                                    </td>
                                    <td>
                                        <input type="date" class="form-control" id="action-next-step-date" name="nextStepDate">
                                    </td>
                                    <td>
                                        <select class="form-control" id="action-owner" name="owner" required>
                                            <option value="">Select Owner</option>
                                            <!-- Users will be loaded here -->
                                        </select>
                                    </td>
                                    <td>
                                        <!-- New actions are not closed by default -->
                                    </td>
                                    <td>
                                        <button type="button" id="save-action-btn" class="btn btn-sm btn-info text-white">Save</button>
                                        <button type="button" id="cancel-action-btn" class="btn btn-sm btn-secondary">Cancel</button>
                                    </td>
                                    <td>
                                        <!-- Notes column (empty for new actions) -->
                                    </td>
                                </tr>
                                <!-- Actions will be loaded here -->
                            </tbody>
                        </table>
                    </div>

                    <div id="no-actions-message" class="text-center" style="display: none;">
                        <p>No actions found for this account</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Action creation is now handled inline in the table -->

<!-- Notes Modal -->
<div class="modal fade" id="notesModal" tabindex="-1" aria-labelledby="notesModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-info text-white">
                <h5 class="modal-title" id="notesModalLabel">Action Notes</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <textarea id="notes-content" class="form-control" rows="5"></textarea>
                <input type="hidden" id="action-id-for-notes">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="save-notes-btn">Save</button>
            </div>
        </div>
    </div>
</div>

<!-- Action Close Confirmation Modal removed as per requirements -->
{% endblock %}

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize the notes modal
        const notesModal = new bootstrap.Modal(document.getElementById('notesModal'));

        // Add event delegation for notes icons
        document.addEventListener('click', function(e) {
            if (e.target && e.target.classList.contains('notes-icon')) {
                const notes = e.target.getAttribute('data-notes');
                const actionId = e.target.getAttribute('data-action-id');
                const notesContent = document.getElementById('notes-content');
                const actionIdInput = document.getElementById('action-id-for-notes');

                // Set the notes content in the modal
                notesContent.value = notes || '';
                actionIdInput.value = actionId;

                // Show the modal
                notesModal.show();
            }
        });

        // Handle save notes button click
        document.getElementById('save-notes-btn').addEventListener('click', function() {
            const actionId = document.getElementById('action-id-for-notes').value;
            const notes = document.getElementById('notes-content').value;

            // Send request to update notes
            fetch(`/actions/${actionId}/update-notes`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `notes=${encodeURIComponent(notes)}`
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Close the modal
                notesModal.hide();

                // Find the action in our stored actions array
                const actionIndex = allAccountActions.findIndex(a => a.id == actionId);
                if (actionIndex !== -1) {
                    // Update the action in our stored array
                    allAccountActions[actionIndex].notes = data.notes;

                    // Find the notes icon for this action
                    const notesIcon = document.querySelector(`.notes-icon[data-action-id="${actionId}"]`);
                    if (notesIcon) {
                        // Update the icon color based on whether there are notes
                        if (data.notes && data.notes.trim() !== '') {
                            notesIcon.style.color = 'red';
                        } else {
                            notesIcon.style.color = '';
                        }

                        // Update the data-notes attribute
                        notesIcon.setAttribute('data-notes', data.notes || '');
                    }
                }
            })
            .catch(error => {
                console.error('Error updating notes:', error);
                alert('Error updating notes. Please try again.');
            });
        });

        // Get all account rows - using a function to always get the current set
        const getAccountRows = () => document.querySelectorAll('.account-row');
        const actionsSection = document.getElementById('actions-section');
        const actionsTbody = document.getElementById('actions-tbody');
        const noActionsMessage = document.getElementById('no-actions-message');
        const createActionBtn = document.getElementById('create-action-btn');

        // Function to update the accounts table with new data
        function updateAccountsTable(accounts) {
            // Get the accounts table body
            const accountsTableBody = document.querySelector('.table-striped tbody');

            // Save the form row if it exists
            const formRow = document.getElementById('account-form-row');
            const formRowDisplay = formRow ? formRow.style.display : 'none';

            // Get all current account rows
            const currentAccountRows = document.querySelectorAll('.account-row');

            // Remove all current account rows
            currentAccountRows.forEach(row => {
                row.remove();
            });

            // Re-add the form row if it exists
            if (formRow) {
                accountsTableBody.appendChild(formRow);
                formRow.style.display = formRowDisplay;
            }

            // Add the updated account rows
            accounts.forEach(account => {
                const row = document.createElement('tr');
                row.className = 'account-row';
                row.setAttribute('data-account-id', account.id);
                row.style.cursor = 'pointer';

                // Check if this is the currently selected account
                if (currentAccountId && currentAccountId == account.id) {
                    row.classList.add('table-primary');
                }

                row.innerHTML = `
                    <td>${account.id}</td>
                    <td class="editable" data-field="name" data-account-id="${account.id}">${account.name}</td>
                    <td>${account.nextAction || ''}</td>
                    <td>${account.nextStepDate || ''}</td>
                    <td>${account.actionOwner || ''}</td>
                    <td>
                        <a href="/accounts/${account.id}/edit" class="btn btn-sm btn-outline-success">
                            <i class="fas fa-edit"></i> Edit
                        </a>
                    </td>
                `;

                accountsTableBody.appendChild(row);

                // Add click event listener to the new row
                row.addEventListener('click', function(e) {
                    if (!e.target.closest('button') && !isEditing) {
                        // Remove active class from all rows
                        document.querySelectorAll('.account-row').forEach(r => r.classList.remove('table-primary'));

                        // Add active class to clicked row
                        this.classList.add('table-primary');

                        // Get account ID and update currentAccountId
                        const accountId = this.getAttribute('data-account-id');
                        currentAccountId = accountId;

                        // Load account actions for the clicked account
                        loadAccountActions(accountId);
                    }
                });
            });
        }

        // Load users for the action owner dropdown
        function loadUsers() {
            fetch('/api/users')
                .then(response => response.json())
                .then(data => {
                    const ownerSelect = document.getElementById('action-owner');
                    // Clear existing options except the first one
                    while (ownerSelect.options.length > 1) {
                        ownerSelect.remove(1);
                    }

                    // Add users to dropdown
                    data.forEach(user => {
                        const option = document.createElement('option');
                        option.value = user.id;
                        option.textContent = user.username;
                        ownerSelect.appendChild(option);
                    });
                })
                .catch(error => {
                    console.error('Error loading users:', error);
                });
        }

        // Load users when the page loads
        loadUsers();

        // Handle create account button click
        const createAccountBtn = document.getElementById('create-account-btn');
        const accountFormRow = document.getElementById('account-form-row');
        const saveAccountBtn = document.getElementById('save-account-btn');
        const cancelAccountBtn = document.getElementById('cancel-account-btn');

        if (createAccountBtn) {
            // Show the form row when Create Account button is clicked
            createAccountBtn.addEventListener('click', function() {
                // Show the form row
                accountFormRow.style.display = 'table-row';

                // Focus on the name input
                document.getElementById('account-name').focus();
            });

            // Handle cancel button
            cancelAccountBtn.addEventListener('click', function() {
                // Hide the form row
                accountFormRow.style.display = 'none';

                // Reset form fields
                document.getElementById('account-name').value = '';
            });

            // Handle save button
            saveAccountBtn.addEventListener('click', function() {
                // Validate required fields
                const name = document.getElementById('account-name').value;
                if (!name) {
                    alert('Name is required');
                    return;
                }

                // Create FormData object
                const formData = new FormData();
                formData.append('name', document.getElementById('account-name').value);
                formData.append('contact', document.getElementById('account-contact').value);

                // Send request to create account
                fetch('/accounts/create-ajax', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Hide the form row
                    accountFormRow.style.display = 'none';

                    // Reset form fields
                    document.getElementById('account-name').value = '';

                    // Add the new account to the table
                    const row = document.createElement('tr');
                    row.className = 'account-row';
                    row.setAttribute('data-account-id', data.id);
                    row.style.cursor = 'pointer';
                    row.innerHTML = `
                        <td>${data.id}</td>
                        <td class="editable" data-field="name" data-account-id="${data.id}">${data.name}</td>
                        <td></td>
                        <td></td>
                        <td>${data.actionOwner || ''}</td>
                        <td>
                            <a href="/accounts/${data.id}/edit" class="btn btn-sm btn-outline-success">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                        </td>
                    `;

                    // Add the new row after the form row
                    if (accountFormRow.nextSibling) {
                        accountFormRow.parentNode.insertBefore(row, accountFormRow.nextSibling);
                    } else {
                        accountFormRow.parentNode.appendChild(row);
                    }

                    // Attach event listeners to the new row
                    row.addEventListener('click', function(e) {
                        if (!e.target.closest('button') && !isEditing) {
                            // Remove active class from all rows
                            document.querySelectorAll('.account-row').forEach(r => r.classList.remove('table-primary'));

                            // Add active class to clicked row
                            this.classList.add('table-primary');

                            // Get account ID and name
                            const accountId = this.getAttribute('data-account-id');
                            const accountName = this.querySelector('td[data-field="name"]').textContent;
                            currentAccountId = accountId;

                            // Update the actions header
                            const actionsHeader = document.getElementById('actions-header');
                            if (actionsHeader) {
                                actionsHeader.textContent = `Actions for ${accountName}`;
                            }

                            // Hide placeholder and enable create action button
                            document.getElementById('actions-placeholder').style.display = 'none';
                            document.getElementById('create-action-btn').disabled = false;

                            // Show actions table container
                            document.getElementById('actions-table-container').style.display = 'block';

                            // Show no actions message since this is a new account
                            noActionsMessage.style.display = 'block';

                            // Clear any existing actions
                            allAccountActions = [];

                            // Save the form row
                            const formRow = document.getElementById('action-form-row');
                            const formRowDisplay = formRow.style.display;

                            // Clear previous actions
                            actionsTbody.innerHTML = '';

                            // Re-add the form row to the tbody
                            actionsTbody.appendChild(formRow);
                            formRow.style.display = formRowDisplay;
                        }
                    });
                })
                .catch(error => {
                    console.error('Error creating account:', error);
                    alert('Error creating account. Please try again.');
                });
            });
        }

        // Get all editable cells
        const editableCells = document.querySelectorAll('.editable');

        // Variable to track if we're currently editing a cell
        let isEditing = false;

        let currentAccountId = null;

        // Function to handle inline editing
        function setupInlineEditing() {
            // We no longer add click event listeners to cells directly
            // Instead, cells will only be editable when the edit button is clicked
            // The actual editing functionality is now moved to makeRowEditable function
        }

        // Function to make a row's cells editable
        function makeRowEditable(accountId) {
            if (isEditing) return;

            const row = document.querySelector(`.account-row[data-account-id="${accountId}"]`);
            const editableCellsInRow = row.querySelectorAll('.editable');

            // Add editing class to the row
            row.classList.add('editing');

            // Make the first cell editable
            if (editableCellsInRow.length > 0) {
                makeFieldEditable(editableCellsInRow[0]);
            }
        }

        // Function to make a specific field editable
        function makeFieldEditable(cell) {
            isEditing = true;

            const field = cell.getAttribute('data-field');
            const accountId = cell.getAttribute('data-account-id');
            const currentValue = cell.textContent.trim();
            const cellType = cell.getAttribute('data-type') || 'text';

            // Store original content to restore if editing is cancelled
            cell.setAttribute('data-original-content', cell.innerHTML);

            // Create input element based on cell type
            let inputElement;

            if (cellType === 'select') {
                // Create select dropdown for fields like priority
                inputElement = document.createElement('select');
                inputElement.className = 'form-control form-control-sm';

                // Get options from data attribute
                const options = JSON.parse(cell.getAttribute('data-options'));

                // Add options to select
                for (const [value, label] of Object.entries(options)) {
                    const option = document.createElement('option');
                    option.value = value;
                    option.textContent = label;
                    if (currentValue === value) {
                        option.selected = true;
                    }
                    inputElement.appendChild(option);
                }
            } else {
                // Create text input for other fields
                inputElement = document.createElement('input');
                inputElement.type = 'text';
                inputElement.className = 'form-control form-control-sm';
                inputElement.value = currentValue;
            }

            // Clear the cell and add the input
            cell.innerHTML = '';
            cell.appendChild(inputElement);

            // Focus the input
            inputElement.focus();

            // Handle input blur (save on focus out)
            inputElement.addEventListener('blur', function() {
                saveEdit(cell, accountId, field, this.value);
            });

            // Handle Enter key press
            inputElement.addEventListener('keydown', function(e) {
                if (e.key === 'Enter') {
                    saveEdit(cell, accountId, field, this.value);
                } else if (e.key === 'Escape') {
                    cancelEdit(cell);
                }
            });
        }

        // Function to save edited value
        function saveEdit(cell, accountId, field, value) {
            // Create form data
            const formData = new FormData();
            formData.append('field', field);
            formData.append('value', value);

            // Send update request
            fetch(`/accounts/${accountId}/update`, {
                method: 'POST',
                body: formData
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // Update cell with new value
                cell.textContent = value;

                // Find the next editable cell in the row
                const row = cell.closest('.account-row');
                const editableCells = Array.from(row.querySelectorAll('.editable'));
                const currentIndex = editableCells.indexOf(cell);
                const nextCell = editableCells[currentIndex + 1];

                // If there's a next cell, make it editable
                if (nextCell) {
                    makeFieldEditable(nextCell);
                } else {
                    // If this was the last cell, we're done editing
                    isEditing = false;

                    // Remove editing class from the row
                    const row = cell.closest('.account-row');
                    row.classList.remove('editing');
                }
            })
            .catch(error => {
                console.error('Error updating account:', error);
                // Restore original content
                cancelEdit(cell);
                alert('Error updating account. Please try again.');
            });
        }

        // Function to cancel editing
        function cancelEdit(cell) {
            cell.innerHTML = cell.getAttribute('data-original-content');
            isEditing = false;

            // Remove editing class from the row
            const row = cell.closest('.account-row');
            if (row) {
                row.classList.remove('editing');
            }
        }

        // Initialize inline editing
        setupInlineEditing();


        // Variable to store all actions for the current account
        let allAccountActions = [];

        // Function to load actions for a specific account
        function loadAccountActions(accountId) {
            if (!accountId) {
                console.error('No account ID provided');
                return;
            }

            // Get account name from the row
            const accountRow = document.querySelector(`.account-row[data-account-id="${accountId}"]`);
            const accountName = accountRow ? accountRow.querySelector('td[data-field="name"]').textContent : 'Unknown Account';

            // Update the actions header with the account name
            const actionsHeader = document.getElementById('actions-header');
            if (actionsHeader) {
                actionsHeader.textContent = `Actions for ${accountName}`;
            }

            // Hide placeholder and enable create action button
            document.getElementById('actions-placeholder').style.display = 'none';
            document.getElementById('create-action-btn').disabled = false;

            // Show actions table container
            document.getElementById('actions-table-container').style.display = 'block';

            // Fetch contacts for this account
            fetch(`/accounts/${accountId}/contacts`)
                .then(response => response.json())
                .then(contacts => {
                    // Populate the contacts dropdown
                    const contactSelect = document.getElementById('action-contact');
                    contactSelect.innerHTML = '<option value="">Select Contact</option>';

                    if (contacts && contacts.length > 0) {
                        contacts.forEach(contact => {
                            const option = document.createElement('option');
                            option.value = contact;
                            option.textContent = contact;
                            contactSelect.appendChild(option);
                        });
                    } else {
                        // If no contacts, add a default option
                        const option = document.createElement('option');
                        option.value = "No contacts available";
                        option.textContent = "No contacts available";
                        contactSelect.appendChild(option);
                    }
                })
                .catch(error => {
                    console.error('Error fetching contacts:', error);
                });

            // Fetch actions for this account
            fetch(`/accounts/${accountId}/actions`)
                .then(response => response.json())
                .then(data => {
                    // Store all actions (already sorted by createdAt DESC from the server)
                    allAccountActions = data;

                    if (data.length > 0) {
                        // Hide no actions message
                        noActionsMessage.style.display = 'none';

                        // Show all actions
                        renderActions(data);
                    } else {
                        // Show no actions message
                        noActionsMessage.style.display = 'block';

                        // Save the form row
                        const formRow = document.getElementById('action-form-row');
                        const formRowDisplay = formRow.style.display;

                        // Clear previous actions
                        actionsTbody.innerHTML = '';

                        // Re-add the form row to the tbody
                        actionsTbody.appendChild(formRow);
                        formRow.style.display = formRowDisplay;
                    }
                })
                .catch(error => {
                    console.error('Error fetching actions:', error);

                    // Save the form row
                    const formRow = document.getElementById('action-form-row');
                    const formRowDisplay = formRow.style.display;

                    // Clear previous actions
                    actionsTbody.innerHTML = '';

                    // Re-add the form row to the tbody
                    actionsTbody.appendChild(formRow);
                    formRow.style.display = formRowDisplay;

                    noActionsMessage.style.display = 'block';
                    noActionsMessage.innerHTML = '<p>Error loading actions. Please try again.</p>';
                });
        }

        // Function to render actions in the table
        function renderActions(actions) {
            // Save the form row
            const formRow = document.getElementById('action-form-row');
            const formRowDisplay = formRow.style.display;

            // Clear previous actions
            actionsTbody.innerHTML = '';

            // Re-add the form row to the tbody
            actionsTbody.appendChild(formRow);
            formRow.style.display = formRowDisplay;

            // Update the actions header with closed/total count
            const closedCount = actions.filter(action => action.closed).length;
            const totalCount = actions.length;
            const actionsHeader = document.getElementById('actions-header');
            if (actionsHeader) {
                const accountName = actionsHeader.textContent.split('(')[0].trim();
                actionsHeader.textContent = `${accountName} (${closedCount}/${totalCount} Closed)`;
            }

            // Add actions to table after the form row
            actions.forEach(action => {
                const row = document.createElement('tr');

                // Check action status and apply appropriate class
                if (action.closed) {
                    // Closed actions
                    row.classList.add('action-closed');
                } else {
                    // Check if action is overdue or upcoming
                    const actionDate = action.nextStepDate ? new Date(action.nextStepDate) : null;
                    const today = new Date();
                    today.setHours(0, 0, 0, 0); // Set to beginning of day

                    if (actionDate) {
                        // Calculate days difference
                        const timeDiff = actionDate.getTime() - today.getTime();
                        const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));

                        if (daysDiff <= 0) {
                            // Overdue actions (today or past)
                            row.classList.add('action-overdue');
                        } else if (daysDiff <= 7) {
                            // Upcoming actions (within next 7 days)
                            row.classList.add('action-upcoming');
                        }
                    }
                }

                // Set data attribute for action ID
                row.setAttribute('data-action-id', action.id);

                // Check if action has notes
                const hasNotes = action.notes && action.notes.trim() !== '';
                const notesIcon = hasNotes ? '<i class="fas fa-comment-alt text-info ml-2" title="This action has notes"></i>' : '';

                row.innerHTML = `
                    <td>${action.id}</td>
                    <td>${action.contact || ''}</td>
                    <td>${action.title}</td>
                    <td>${action.nextStepDate || ''}</td>
                    <td>${action.owner}</td>
                    <td>
                        <div class="form-check">
                            <input class="form-check-input action-closed-checkbox" type="checkbox"
                                   ${action.closed ? 'checked' : ''}
                                   data-action-id="${action.id}">
                        </div>
                    </td>
                    <td></td>
                    <td class="text-center">
                        <i class="fas fa-pencil-alt notes-icon" style="cursor: pointer; ${hasNotes ? 'color: red;' : ''}" data-action-id="${action.id}" data-notes="${action.notes ? action.notes.replace(/"/g, '&quot;') : ''}"></i>
                    </td>
                `;
                actionsTbody.appendChild(row);
            });

            // Show the actions table container and hide the placeholder
            document.getElementById('actions-table-container').style.display = 'block';
            document.getElementById('actions-placeholder').style.display = 'none';
        }

        // Add click event listener to each account row
        getAccountRows().forEach(row => {
            row.addEventListener('click', function(e) {
                // If we're editing, don't trigger row selection
                if (isEditing) {
                    return;
                }

                // Remove active class from all rows
                document.querySelectorAll('.account-row').forEach(r => r.classList.remove('table-primary'));

                // Add active class to clicked row
                this.classList.add('table-primary');

                // Get account ID from data attribute
                const accountId = this.getAttribute('data-account-id');
                currentAccountId = accountId;

                // Load account actions
                loadAccountActions(accountId);
            });
        });


        // Confirmation modal and related code removed as per requirements

        // Add event delegation for action closed checkboxes
        actionsTbody.addEventListener('change', function(e) {
            if (e.target && e.target.classList.contains('action-closed-checkbox')) {
                const actionId = e.target.getAttribute('data-action-id');
                const isChecked = e.target.checked;

                // Find the action in our stored actions array
                const actionIndex = allAccountActions.findIndex(a => a.id == actionId);
                if (actionIndex === -1) {
                    console.error('Action not found in stored actions');
                    return;
                }

                // Directly send request to toggle closed status
                fetch(`/actions/${actionId}/toggle-closed`, {
                    method: 'POST'
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Update the action in our stored array
                    allAccountActions[actionIndex] = data;

                    // Find the row in the table
                    const row = document.querySelector(`tr[data-action-id="${actionId}"]`);

                    // Update the row's status classes
                    // First, remove all status classes
                    row.classList.remove('action-closed', 'action-overdue', 'action-upcoming');

                    // Add appropriate class based on closed status
                    if (data.closed) {
                        row.classList.add('action-closed');
                    } else {
                        // Check if action is overdue or upcoming
                        const actionDate = data.nextStepDate ? new Date(data.nextStepDate) : null;
                        const today = new Date();
                        today.setHours(0, 0, 0, 0); // Set to beginning of day

                        if (actionDate) {
                            // Calculate days difference
                            const timeDiff = actionDate.getTime() - today.getTime();
                            const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));

                            if (daysDiff <= 0) {
                                // Overdue actions (today or past)
                                row.classList.add('action-overdue');
                            } else if (daysDiff <= 7) {
                                // Upcoming actions (within next 7 days)
                                row.classList.add('action-upcoming');
                            }
                        }
                    }

                    // Update the notes icon if needed
                    const cells = row.querySelectorAll('td');
                    if (cells.length >= 8) {
                        const notesCell = cells[7]; // 8th cell (index 7) is the Notes column
                        const hasNotes = data.notes && data.notes.trim() !== '';
                        notesCell.innerHTML = `<i class="fas fa-pencil-alt notes-icon" style="cursor: pointer; ${hasNotes ? 'color: red;' : ''}" data-action-id="${data.id}" data-notes="${data.notes ? data.notes.replace(/"/g, '&quot;') : ''}"></i>`;
                    }

                    // Update the actions header with closed/total count
                    const closedCount = allAccountActions.filter(action => action.closed).length;
                    const totalCount = allAccountActions.length;
                    const actionsHeader = document.getElementById('actions-header');
                    if (actionsHeader) {
                        const accountName = actionsHeader.textContent.split('(')[0].trim();
                        actionsHeader.textContent = `${accountName} (${closedCount}/${totalCount} Closed)`;
                    }

                    // Refresh the accounts list
                    fetch('/accounts/list-ajax')
                        .then(response => response.json())
                        .then(data => {
                            // Update the accounts table with the new data
                            updateAccountsTable(data);

                            // Ensure the current account remains selected and clickable
                            const selectedRow = document.querySelector(`.account-row[data-account-id="${currentAccountId}"]`);
                            if (selectedRow) {
                                selectedRow.classList.add('table-primary');
                            }

                            // Reattach event listeners to all account rows
                            getAccountRows().forEach(row => {
                                // Remove existing event listeners (to avoid duplicates)
                                const newRow = row.cloneNode(true);
                                row.parentNode.replaceChild(newRow, row);

                                // Add click event listener to the new row
                                newRow.addEventListener('click', function(e) {
                                    // If we're editing, don't trigger row selection
                                    if (isEditing) {
                                        return;
                                    }

                                    // Remove active class from all rows
                                    document.querySelectorAll('.account-row').forEach(r => r.classList.remove('table-primary'));

                                    // Add active class to clicked row
                                    this.classList.add('table-primary');

                                    // Get account ID from data attribute
                                    const accountId = this.getAttribute('data-account-id');
                                    currentAccountId = accountId;

                                    // Load account actions
                                    loadAccountActions(accountId);
                                });
                            });
                        })
                        .catch(error => {
                            console.error('Error refreshing accounts list:', error);
                        });
                })
                .catch(error => {
                    console.error('Error toggling action status:', error);
                    alert('Error updating action. Please try again.');
                    // Reset checkbox to its previous state
                    e.target.checked = !isChecked;
                });
            }
        });

        // Handle create action button click
        if (createActionBtn) {
            const actionFormRow = document.getElementById('action-form-row');
            const saveActionBtn = document.getElementById('save-action-btn');
            const cancelActionBtn = document.getElementById('cancel-action-btn');

            // Show the form row when Create Action button is clicked
            createActionBtn.addEventListener('click', function() {
                if (!currentAccountId) {
                    alert('Please select an account first');
                    return;
                }

                // Make sure the actions table container is visible
                document.getElementById('actions-table-container').style.display = 'block';
                document.getElementById('actions-placeholder').style.display = 'none';

                // Show the form row
                actionFormRow.style.display = 'table-row';

                // Focus on the title input
                document.getElementById('action-title').focus();
            });

            // Handle cancel button
            cancelActionBtn.addEventListener('click', function() {
                // Hide the form row
                actionFormRow.style.display = 'none';

                // Reset form fields
                document.getElementById('action-title').value = '';
                document.getElementById('action-contact').value = '';
                document.getElementById('action-next-step-date').value = '';
                document.getElementById('action-owner').value = '';

                // If there are no actions, show the no actions message
                if (allAccountActions.length === 0) {
                    noActionsMessage.style.display = 'block';
                }
            });

            // Handle save button
            saveActionBtn.addEventListener('click', function() {
                if (!currentAccountId) {
                    alert('Please select an account first');
                    return;
                }

                // Validate required fields
                const title = document.getElementById('action-title').value;
                if (!title) {
                    alert('Title is required');
                    return;
                }

                const contact = document.getElementById('action-contact').value;
                if (!contact) {
                    alert('Contact is required');
                    return;
                }

                const owner = document.getElementById('action-owner').value;
                if (!owner) {
                    alert('Owner is required');
                    return;
                }

                // Create FormData object
                const formData = new FormData();
                formData.append('title', document.getElementById('action-title').value);
                formData.append('contact', document.getElementById('action-contact').value);
                formData.append('nextStepDate', document.getElementById('action-next-step-date').value);
                formData.append('owner', document.getElementById('action-owner').value);

                // Send request to create action
                fetch(`/accounts/${currentAccountId}/create-action`, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Hide the form row
                    actionFormRow.style.display = 'none';

                    // Reset form fields
                    document.getElementById('action-title').value = '';
                    document.getElementById('action-contact').value = '';
                    document.getElementById('action-next-step-date').value = '';
                    document.getElementById('action-owner').value = '';

                    // Add the new action to our stored actions array and sort by createdAt
                    allAccountActions.push(data);
                    // Sort actions by createdAt in descending order
                    allAccountActions.sort((a, b) => {
                        return new Date(b.createdAt) - new Date(a.createdAt);
                    });

                    // Hide no actions message if it's visible
                    if (noActionsMessage.style.display !== 'none') {
                        noActionsMessage.style.display = 'none';
                    }

                    // Display all actions
                    renderActions(allAccountActions);

                    // Refresh the accounts list to reflect the new action
                    fetch('/accounts/list-ajax')
                        .then(response => response.json())
                        .then(data => {
                            // Update the accounts table with the new data
                            updateAccountsTable(data);

                            // Ensure the current account remains selected and clickable
                            const selectedRow = document.querySelector(`.account-row[data-account-id="${currentAccountId}"]`);
                            if (selectedRow) {
                                selectedRow.classList.add('table-primary');
                            }

                            // Reattach event listeners to all account rows
                            getAccountRows().forEach(row => {
                                // Remove existing event listeners (to avoid duplicates)
                                const newRow = row.cloneNode(true);
                                row.parentNode.replaceChild(newRow, row);

                                // Add click event listener to the new row
                                newRow.addEventListener('click', function(e) {
                                    // If we're editing, don't trigger row selection
                                    if (isEditing) {
                                        return;
                                    }

                                    // Remove active class from all rows
                                    document.querySelectorAll('.account-row').forEach(r => r.classList.remove('table-primary'));

                                    // Add active class to clicked row
                                    this.classList.add('table-primary');

                                    // Get account ID from data attribute
                                    const accountId = this.getAttribute('data-account-id');
                                    currentAccountId = accountId;

                                    // Load account actions
                                    loadAccountActions(accountId);
                                });
                            });
                        })
                        .catch(error => {
                            console.error('Error refreshing accounts list:', error);
                        });
                })
                .catch(error => {
                    console.error('Error creating action:', error);
                    alert('Error creating action. Please try again.');
                });
            });
        }
    });
</script>
{% endblock %}
