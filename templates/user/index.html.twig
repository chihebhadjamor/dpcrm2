{% extends 'base.html.twig' %}

{% block title %}Users{% endblock %}

{% block stylesheets %}
    <style>
        /* General styles */
        .user-list-column { width: 35%; float: left; padding-right: 15px; }
        .backlog-column { width: 65%; float: left; padding-left: 15px; }
        .user-row.selected { background-color: #e2f0e2 !important; }
        .loading-spinner { display: none; text-align: center; padding: 20px; }
        .loading-spinner i { font-size: 2rem; }

        /* Action status styling */
        .action-closed { background-color: #e6e6e6 !important; font-style: italic; text-decoration: line-through; }
        .action-overdue { background-color: #ffcccc !important; }
        .action-upcoming { background-color: #fff2cc !important; }

        /* Center align status column */
        #backlog-table th:nth-child(6),
        #backlog-table td:nth-child(6) { text-align: center; }

        /* Notes badge styling */
        #notes-badge {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            width: 20px;
            height: 20px;
            font-size: 0.75rem;
            margin-left: 5px;
            padding: 0;
            border-radius: 50%;
            background-color: #dc3545;
            color: white;
            font-weight: bold;
        }

        /* Responsive layout */
        @media (max-width: 768px) {
            .user-list-column, .backlog-column { width: 100%; float: none; padding: 0; }
            .backlog-column { margin-top: 20px; }
        }
    </style>
{% endblock %}

{% block body %}
    <div id="notification-container" style="position: fixed; top: 20px; right: 20px; z-index: 1050;"></div>

    <div class="row mb-4">
        <div class="clearfix">
            <div class="user-list-column">
                <div class="card">
                    <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                        <h4 class="mb-0">Users List</h4>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Username</th>
                                    <th>Email</th>
                                </tr>
                                </thead>
                                <tbody>
                                {% for user in users %}
                                    <tr class="user-row" data-user-id="{{ user.id }}" data-username="{{ user.username }}" style="cursor: pointer;">
                                        <td>{{ user.id }}</td>
                                        <td>{{ user.username }}</td>
                                        <td>{{ user.email }}</td>
                                    </tr>
                                {% else %}
                                    <tr>
                                        <td colspan="3" class="text-center">No users found</td>
                                    </tr>
                                {% endfor %}
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>

            <div class="backlog-column">
                <div id="backlog-container" class="card">
                    <div class="card-header bg-success text-white">
                        <h4 class="mb-0" id="backlog-header">Backlog</h4>
                    </div>
                    <div class="card-body">
                        <div id="no-user-selected-message" class="text-center">
                            <p class="mb-0">Select a user to view their backlog.</p>
                        </div>
                        <div id="loading-spinner" class="loading-spinner">
                            <i class="fas fa-spinner fa-spin"></i>
                            <p>Loading backlog...</p>
                        </div>
                        <div id="backlog-content" style="display: none;">
                            <div class="table-responsive" style="max-height: 70vh; overflow-y: auto;">
                                <table id="backlog-table" class="table table-striped">
                                    <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Account</th>
                                        <th>Action</th>
                                        <th>Contact</th>
                                        <th>Action Date</th>
                                        <th>Status</th>
                                        <th>Notes <span id="notes-badge" class="badge rounded-circle bg-danger" style="display: none;"></span></th>
                                    </tr>
                                    </thead>
                                    <tbody id="backlog-tbody">
                                    </tbody>
                                </table>
                            </div>
                            <div id="no-actions-message" class="text-center mt-3" style="display: none;">
                                <p>This user has no actions to display.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="notesModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-info text-white">
                    <h5 class="modal-title">Action Notes</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <textarea id="notes-content" class="form-control" rows="5"></textarea>
                    <input type="hidden" id="action-id-for-notes">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="save-notes-btn">Save</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // --- STATE MANAGEMENT ---
            let userBacklogActions = [];
            let currentUserId = null;
            const notesModal = new bootstrap.Modal(document.getElementById('notesModal'));

            // --- DOM ELEMENTS ---
            const backlogContainer = document.getElementById('backlog-container');
            const backlogHeader = document.getElementById('backlog-header');
            const backlogContent = document.getElementById('backlog-content');
            const backlogTbody = document.getElementById('backlog-tbody');
            const loadingSpinner = document.getElementById('loading-spinner');
            const noUserMessage = document.getElementById('no-user-selected-message');
            const noActionsMessage = document.getElementById('no-actions-message');
            const userRows = document.querySelectorAll('.user-row');

            // --- NOTIFICATION UTILITY ---
            function showNotification(message, type = 'success', duration = 3000) {
                const container = document.getElementById('notification-container');
                const alert = document.createElement('div');
                alert.className = `alert alert-${type} alert-dismissible fade show`;
                alert.role = 'alert';
                alert.innerHTML = `${message}<button type="button" class="btn-close" data-bs-dismiss="alert"></button>`;
                container.appendChild(alert);
                setTimeout(() => new bootstrap.Alert(alert).close(), duration);
            }

            // --- RENDERING LOGIC ---
            function renderBacklog() {
                backlogTbody.innerHTML = ''; // Clear existing content
                if (userBacklogActions.length === 0) {
                    noActionsMessage.style.display = 'block';
                    // Hide notes badge when no actions
                    document.getElementById('notes-badge').style.display = 'none';
                    return;
                }
                noActionsMessage.style.display = 'none';

                // Calculate total non-empty notes count by account
                const accountNotesMap = {};
                userBacklogActions.forEach(action => {
                    if (action.accountNotesCount > 0) {
                        accountNotesMap[action.accountId] = action.accountNotesCount;
                    }
                });

                // Update the notes badge
                const notesBadge = document.getElementById('notes-badge');
                const totalNotes = Object.values(accountNotesMap).reduce((sum, count) => sum + count, 0);

                if (totalNotes > 0) {
                    notesBadge.textContent = totalNotes;
                    notesBadge.style.display = 'inline-block';
                } else {
                    notesBadge.style.display = 'none';
                }

                userBacklogActions.forEach(action => {
                    const row = document.createElement('tr');

                    // Determine row classes for styling
                    row.className = '';
                    if (action.closed) {
                        row.classList.add('action-closed');
                    } else if (action.nextStepDate) {
                        const actionDate = new Date(action.nextStepDate);
                        const today = new Date();
                        today.setHours(0, 0, 0, 0);
                        const daysDiff = Math.ceil((actionDate - today) / (1000 * 3600 * 24));
                        if (daysDiff < 0) row.classList.add('action-overdue');
                        else if (daysDiff <= 7) row.classList.add('action-upcoming');
                    }

                    row.innerHTML = `
                <td>${action.id}</td>
                <td>${action.accountName || 'N/A'}</td>
                <td>${action.lastAction || ''}</td>
                <td>${action.contact || ''}</td>
                <td>${action.nextStepDate || ''}</td>
                <td>
                    <input class="form-check-input action-status-checkbox" type="checkbox"
                           data-action-id="${action.id}" ${action.closed ? 'checked' : ''}>
                </td>
                <td class="text-center">
                    <i class="fas fa-pencil-alt notes-icon" style="cursor: pointer; ${action.hasNotes ? 'color: red;' : ''}"
                       data-action-id="${action.id}" data-notes="${action.notes ? action.notes.replace(/"/g, '&quot;') : ''}"
                       data-account-id="${action.accountId}"></i>
                </td>
            `;
                    backlogTbody.appendChild(row);
                });
            }

            // --- DATA FETCHING ---
            async function fetchAndRenderBacklog(userId) {
                currentUserId = userId;
                loadingSpinner.style.display = 'block';
                noUserMessage.style.display = 'none';
                backlogContent.style.display = 'none';

                try {
                    const response = await fetch(`/users/${userId}/account-actions`);
                    if (!response.ok) throw new Error('Failed to fetch backlog.');

                    userBacklogActions = await response.json();
                    renderBacklog();
                    backlogContent.style.display = 'block';
                } catch (error) {
                    console.error('Error fetching backlog:', error);
                    showNotification('Could not load user backlog.', 'danger');
                    noUserMessage.style.display = 'block'; // Show a message in the main area
                } finally {
                    loadingSpinner.style.display = 'none';
                }
            }

            // --- EVENT LISTENERS ---

            // 1. User row clicks
            userRows.forEach(row => {
                row.addEventListener('click', () => {
                    userRows.forEach(r => r.classList.remove('selected'));
                    row.classList.add('selected');
                    const userId = row.dataset.userId;
                    const username = row.dataset.username;
                    backlogHeader.textContent = `Backlog of ${username}`;
                    fetchAndRenderBacklog(userId);
                });
            });

            // 2. Action Status Toggle (using event delegation)
            backlogTbody.addEventListener('change', async (e) => {
                if (!e.target.classList.contains('action-status-checkbox')) return;

                const checkbox = e.target;
                const actionId = checkbox.dataset.actionId;
                checkbox.disabled = true; // Prevent rapid clicks

                try {
                    const response = await fetch(`/actions/${actionId}/toggle-closed`, { method: 'POST' });
                    if (!response.ok) throw new Error('Status update failed.');

                    const updatedAction = await response.json();

                    // Find and update the action in our local state array
                    const actionIndex = userBacklogActions.findIndex(a => a.id == actionId);
                    if (actionIndex !== -1) {
                        userBacklogActions[actionIndex] = updatedAction;
                    }

                    renderBacklog(); // Re-render the whole table from the updated state
                    const message = updatedAction.closed ? 'closed' : 'reopened';
                    showNotification(`Action ${actionId} ${message} successfully.`, 'success');

                } catch (error) {
                    console.error('Error toggling action status:', error);
                    showNotification('Error updating status.', 'danger');
                    checkbox.checked = !checkbox.checked; // Revert checkbox on failure
                } finally {
                    // Re-find the checkbox in the newly rendered DOM and enable it
                    const newCheckbox = backlogTbody.querySelector(`.action-status-checkbox[data-action-id="${actionId}"]`);
                    if (newCheckbox) newCheckbox.disabled = false;
                }
            });

            // 3. Notes Modal Logic (using event delegation)
            backlogTbody.addEventListener('click', e => {
                if (!e.target.classList.contains('notes-icon')) return;

                const icon = e.target;
                document.getElementById('action-id-for-notes').value = icon.dataset.actionId;
                document.getElementById('notes-content').value = icon.dataset.notes || '';
                notesModal.show();
            });

            document.getElementById('save-notes-btn').addEventListener('click', async () => {
                const actionId = document.getElementById('action-id-for-notes').value;
                const notes = document.getElementById('notes-content').value;
                const formData = new URLSearchParams({ notes });

                try {
                    const response = await fetch(`/actions/${actionId}/update-notes`, {
                        method: 'POST',
                        body: formData
                    });
                    if (!response.ok) throw new Error('Failed to save notes.');

                    const updatedAction = await response.json();

                    const actionIndex = userBacklogActions.findIndex(a => a.id == actionId);
                    if (actionIndex !== -1) {
                        // Store the previous account ID and notes status
                        const accountId = userBacklogActions[actionIndex].accountId;
                        const hadNotesBefore = !!(userBacklogActions[actionIndex].notes && userBacklogActions[actionIndex].notes.trim());
                        const hasNotesNow = !!(updatedAction.notes && updatedAction.notes.trim());

                        // Update the action with the response data
                        userBacklogActions[actionIndex] = updatedAction;

                        // Ensure accountId is preserved (in case it's not returned by the API)
                        userBacklogActions[actionIndex].accountId = accountId;

                        // Update accountNotesCount for all actions with the same accountId
                        if (hadNotesBefore !== hasNotesNow) {
                            userBacklogActions.forEach(action => {
                                if (action.accountId === accountId) {
                                    // Increment or decrement the account notes count
                                    if (hasNotesNow && !hadNotesBefore) {
                                        action.accountNotesCount = (action.accountNotesCount || 0) + 1;
                                    } else if (!hasNotesNow && hadNotesBefore) {
                                        action.accountNotesCount = Math.max(0, (action.accountNotesCount || 0) - 1);
                                    }
                                }
                            });
                        }
                    }

                    renderBacklog();
                    notesModal.hide();
                    showNotification('Notes saved successfully.', 'success');

                } catch (error) {
                    console.error('Error saving notes:', error);
                    showNotification('Could not save notes.', 'danger');
                }
            });
        });
    </script>
{% endblock %}
