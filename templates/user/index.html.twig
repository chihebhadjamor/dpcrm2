{% extends 'base.html.twig' %}

{% block title %}Users{% endblock %}

{% block stylesheets %}
<style>
    .editable {
        /* Removed cursor: pointer to indicate cells are not directly editable */
    }

    .editable:hover {
        background-color: #f8f9fa;
        position: relative;
    }

    .row.navigation-container {
        display: flex;
        flex-wrap: nowrap;
    }

    .navigation-left-panel {
        width: 10%;
        border-right: 1px solid #ccc;
        padding-right: 15px;
    }

    .navigation-right-panel {
        width: 90%;
        padding-left: 15px;
    }
</style>
{% endblock %}

{% block body %}
<div class="row mb-4">
    <div class="col-md-12">
        <div class="card">
            <div class="card-header">
                <h1>Dashboard</h1>
            </div>
            <div class="card-body">
                <p>Welcome, {{ app.user.username is defined ? app.user.username : app.user.userIdentifier }}!</p>
            </div>
        </div>
    </div>
</div>

{# Hidden inputs for CSRF tokens #}
<input type="hidden" id="csrf_token_create_user" value="{{ csrf_token('create_user') }}">

<div class="row navigation-container">
    <!-- Left Panel with Navigation Links (Detached) -->
    <div class="navigation-left-panel">
        <div class="card">
            <div class="card-header bg-primary text-white">
                <h4 class="mb-0">Navigation</h4>
            </div>
            <div class="card-body">
                <div class="list-group">
                    <a href="{{ path('app_users') }}" class="list-group-item list-group-item-action list-group-item-primary active">
                        <i class="fas fa-users"></i> Users
                    </a>
                    <a href="{{ path('app_accounts') }}" class="list-group-item list-group-item-action list-group-item-success">
                        <i class="fas fa-building"></i> Accounts
                    </a>
                </div>

                <div class="mt-4">
                    <a href="{{ path('app_logout') }}" class="btn btn-danger w-100">Logout</a>
                </div>
            </div>
        </div>
    </div>

    <!-- Right Panel for Content Display (Detached) -->
    <div class="navigation-right-panel">
        <div class="card">
            <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                <h4 class="mb-0">Users List</h4>
                <button type="button" class="btn btn-light" id="create-user-btn">
                    <i class="fas fa-plus"></i> Create User
                </button>
            </div>
            <div class="card-body">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Username</th>
                            <th>Email</th>
                            <th>Roles</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Form row for creating new user -->
                        <tr id="user-form-row" style="display: none;">
                            <td><i>New</i></td>
                            <td>
                                <input type="text" class="form-control" id="user-username" name="username" placeholder="Username" required>
                            </td>
                            <td>
                                <input type="email" class="form-control" id="user-email" name="email" placeholder="Email" required>
                            </td>
                            <td>
                                <input type="password" class="form-control" id="user-password" name="password" placeholder="Password" required>
                            </td>
                            <td>
                                <button type="button" id="save-user-btn" class="btn btn-sm btn-success text-white">Save</button>
                                <button type="button" id="cancel-user-btn" class="btn btn-sm btn-secondary">Cancel</button>
                            </td>
                        </tr>
                        {% for user in users %}
                            <tr class="user-row" data-user-id="{{ user.id }}" style="cursor: pointer;">
                                <td>{{ user.id }}</td>
                                <td class="editable" data-field="username" data-user-id="{{ user.id }}">{{ user.username }}</td>
                                <td class="editable" data-field="email" data-user-id="{{ user.id }}">{{ user.email }}</td>
                                <td class="editable" data-field="roles" data-user-id="{{ user.id }}">{{ user.roles|join(', ') }}</td>
                                <td>
                                    <a href="{{ path('app_user_edit', {'id': user.id}) }}" class="btn btn-sm btn-outline-success">
                                        <i class="fas fa-edit"></i> Edit
                                    </a>
                                </td>
                            </tr>
                        {% else %}
                            <tr>
                                <td colspan="4" class="text-center">No users found</td>
                            </tr>
                        {% endfor %}
                    </tbody>
                </table>


                <!-- Account Actions Section -->
                <div id="account-actions-section" class="mt-4" style="display: none;">
                    <div class="card">
                        <div class="card-header bg-success text-white">
                            <h4 class="mb-0">User Account Actions</h4>
                        </div>
                        <div class="card-body">
                            <div style="max-height: 20vh; overflow-y: auto;">
                                <table id="account-actions-table" class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Account Name</th>
                                            <th>Last Action</th>
                                            <th>Priority</th>
                                            <th>Next Step</th>
                                        </tr>
                                    </thead>
                                    <tbody id="account-actions-tbody">
                                        <!-- Account actions will be loaded here -->
                                    </tbody>
                                </table>
                            </div>
                            <div id="no-account-actions-message" class="text-center" style="display: none;">
                                <p>No account actions found for this user</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- User creation is now handled inline in the table -->

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Get all user rows
        const userRows = document.querySelectorAll('.user-row');

        // Account actions elements
        const accountActionsSection = document.getElementById('account-actions-section');
        const accountActionsTbody = document.getElementById('account-actions-tbody');
        const noAccountActionsMessage = document.getElementById('no-account-actions-message');

        // Handle create user button click
        const createUserBtn = document.getElementById('create-user-btn');
        const userFormRow = document.getElementById('user-form-row');
        const saveUserBtn = document.getElementById('save-user-btn');
        const cancelUserBtn = document.getElementById('cancel-user-btn');

        if (createUserBtn) {
            // Show the form row when Create User button is clicked
            createUserBtn.addEventListener('click', function() {
                // Show the form row
                userFormRow.style.display = 'table-row';

                // Focus on the username input
                document.getElementById('user-username').focus();
            });

            // Handle cancel button
            cancelUserBtn.addEventListener('click', function() {
                // Hide the form row
                userFormRow.style.display = 'none';

                // Reset form fields
                document.getElementById('user-username').value = '';
                document.getElementById('user-email').value = '';
                document.getElementById('user-password').value = '';
            });

            // Handle save button
            saveUserBtn.addEventListener('click', function() {
                // Validate required fields
                const username = document.getElementById('user-username').value;
                if (!username) {
                    alert('Username is required');
                    return;
                }

                const email = document.getElementById('user-email').value;
                if (!email) {
                    alert('Email is required');
                    return;
                }

                const password = document.getElementById('user-password').value;
                if (!password) {
                    alert('Password is required');
                    return;
                }

                // Create FormData object
                const formData = new FormData();
                formData.append('username', username);
                formData.append('email', email);
                formData.append('password', password);

                // Add CSRF token
                const csrfToken = document.getElementById('csrf_token_create_user').value;
                formData.append('_token', csrfToken);

                // Send request to create user
                fetch('/users/create-ajax', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Hide the form row
                    userFormRow.style.display = 'none';

                    // Reset form fields
                    document.getElementById('user-username').value = '';
                    document.getElementById('user-email').value = '';
                    document.getElementById('user-password').value = '';

                    // Add the new user to the table
                    const row = document.createElement('tr');
                    row.className = 'user-row';
                    row.setAttribute('data-user-id', data.id);
                    row.style.cursor = 'pointer';
                    row.innerHTML = `
                        <td>${data.id}</td>
                        <td class="editable" data-field="username" data-user-id="${data.id}">${data.username}</td>
                        <td class="editable" data-field="email" data-user-id="${data.id}">${data.email}</td>
                        <td class="editable" data-field="roles" data-user-id="${data.id}">${data.roles.join(', ')}</td>
                        <td>
                            <a href="/users/${data.id}/edit" class="btn btn-sm btn-outline-success">
                                <i class="fas fa-edit"></i> Edit
                            </a>
                        </td>
                    `;

                    // Add the new row after the form row
                    if (userFormRow.nextSibling) {
                        userFormRow.parentNode.insertBefore(row, userFormRow.nextSibling);
                    } else {
                        userFormRow.parentNode.appendChild(row);
                    }

                    // Attach event listeners to the new row
                    row.addEventListener('click', function(e) {
                        if (!e.target.closest('button')) {
                            // Remove active class from all rows
                            userRows.forEach(r => r.classList.remove('table-primary'));

                            // Add active class to clicked row
                            this.classList.add('table-primary');

                            // Get user ID from data attribute
                            const userId = this.getAttribute('data-user-id');

                        }
                    });

                })
                .catch(error => {
                    console.error('Error creating user:', error);
                    alert('Error creating user. Please try again.');
                });
            });
        }




        // Add click event listener to each user row
        userRows.forEach(row => {
            row.addEventListener('click', function(e) {

                // Remove active class from all rows
                userRows.forEach(r => r.classList.remove('table-primary'));

                // Add active class to clicked row
                this.classList.add('table-primary');

                // Get user ID from data attribute
                const userId = this.getAttribute('data-user-id');


                // Fetch account actions for this user
                if (accountActionsSection) {
                    fetch(`/users/${userId}/account-actions`)
                        .then(response => response.json())
                        .then(data => {
                            // Clear previous account actions
                            accountActionsTbody.innerHTML = '';

                            // Show account actions section
                            accountActionsSection.style.display = 'block';

                            if (data.length > 0) {
                                // Hide no account actions message
                                if (noAccountActionsMessage) {
                                    noAccountActionsMessage.style.display = 'none';
                                }

                                // Add account actions to table
                                data.forEach(action => {
                                    const row = document.createElement('tr');
                                    row.innerHTML = `
                                        <td>${action.id}</td>
                                        <td>${action.accountName}</td>
                                        <td>${action.lastAction}</td>
                                        <td>${action.priority}</td>
                                        <td>${action.nextStep || 'N/A'}</td>
                                    `;
                                    accountActionsTbody.appendChild(row);
                                });
                            } else {
                                // Show no account actions message
                                if (noAccountActionsMessage) {
                                    noAccountActionsMessage.style.display = 'block';
                                }
                            }
                        })
                        .catch(error => {
                            console.error('Error fetching account actions:', error);
                            if (accountActionsSection) {
                                accountActionsSection.style.display = 'block';

                                // Clear previous account actions
                                accountActionsTbody.innerHTML = '';

                                if (noAccountActionsMessage) {
                                    noAccountActionsMessage.style.display = 'block';
                                    noAccountActionsMessage.innerHTML = '<p>Error loading account actions. Please try again.</p>';
                                }
                            }
                        });
                }
            });
        });

    });
</script>
{% endblock %}

{% endblock %}
