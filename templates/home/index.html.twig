{% extends 'base.html.twig' %}

{% block title %}Dashboard{% endblock %}

{% block stylesheets %}
<style>
    /* Style for the My Actions frame */
    .my-actions-frame {
        margin-top: 20px;
    }

    .my-actions-table {
        width: 100%;
    }

    .my-actions-table th {
        background-color: #f8f9fa;
        font-weight: bold;
    }

    /* Include shared action styles */
    {% include 'partials/action_styles.html.twig' %}
</style>
{% endblock %}

{% block body %}
<div class="row mb-4">
    <div class="col-12">
        <div class="card">
            <div class="card-header">
                <h1>Dashboard</h1>
            </div>
            <div class="card-body">
                <p>Use the menu to navigate between Users and Accounts.</p>

                <!-- My Actions Frame -->
                <div class="my-actions-frame">
                    <div class="card">
                        <div class="card-header bg-primary text-white">
                            <h4 class="mb-0">My Actions (All)</h4>
                        </div>
                        <div class="card-body">
                            <div id="my-actions-loading" class="text-center">
                                <p>Loading your actions...</p>
                            </div>
                            <div id="my-actions-error" class="text-center text-danger" style="display: none;">
                                <p>Error loading actions. Please try again.</p>
                            </div>
                            <div id="my-actions-empty" class="text-center" style="display: none;">
                                <p>You have no actions assigned to you.</p>
                            </div>
                            <div id="my-actions-content" style="display: none;">
                                <div class="table-responsive">
                                    <table class="table table-striped my-actions-table">
                                        <thead>
                                            <tr>
                                                <th>Type</th>
                                                <th>Action</th>
                                                <th>Account</th>
                                                <th>Next Step Date</th>
                                                <th>Created At</th>
                                                <th>Status</th>
                                            </tr>
                                        </thead>
                                        <tbody id="my-actions-tbody">
                                            <!-- Actions will be loaded here -->
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block javascripts %}
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Elements for the My Actions frame
        const myActionsLoading = document.getElementById('my-actions-loading');
        const myActionsError = document.getElementById('my-actions-error');
        const myActionsEmpty = document.getElementById('my-actions-empty');
        const myActionsContent = document.getElementById('my-actions-content');
        const myActionsTbody = document.getElementById('my-actions-tbody');

        // Function to load the current user's actions
        function loadMyActions() {
            // Show loading indicator
            myActionsLoading.style.display = 'block';
            myActionsError.style.display = 'none';
            myActionsEmpty.style.display = 'none';
            myActionsContent.style.display = 'none';

            // Fetch actions from the server
            fetch('/my-actions')
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    // Hide loading indicator
                    myActionsLoading.style.display = 'none';

                    // Clear previous actions
                    myActionsTbody.innerHTML = '';

                    if (data.length > 0) {
                        // Show actions content
                        myActionsContent.style.display = 'block';

                        // Add actions to table
                        data.forEach(action => {
                            const row = document.createElement('tr');
                            row.innerHTML = `
                                <td>${action.type}</td>
                                <td>${action.title}</td>
                                <td>${action.account || 'N/A'}</td>
                                <td>${action.nextStepDate || 'N/A'}</td>
                                <td>${action.createdAt}</td>
                                <td>${action.closed ? 'Closed on ' + action.dateClosed : 'Open'}</td>
                            `;

                            // Determine row classes for styling
                            if (action.closed) {
                                // Closed actions - this styling takes precedence over date-based styling
                                row.classList.add('action-closed');
                            } else if (action.nextStepDate) {
                                // Parse the date string to ensure correct local date handling
                                const dateParts = action.nextStepDate.split('/');
                                if (dateParts.length === 3) {
                                    // Assuming date format is DD/MM/YYYY
                                    const day = parseInt(dateParts[0], 10);
                                    const month = parseInt(dateParts[1], 10) - 1; // month is 0-indexed in JS Date
                                    const year = parseInt(dateParts[2], 10);

                                    const actionDate = new Date(year, month, day);
                                    const today = new Date();
                                    today.setHours(0, 0, 0, 0); // Set to beginning of day

                                    const timeDiff = actionDate.getTime() - today.getTime();
                                    const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));

                                    // First check if action is overdue (in the past)
                                    if (daysDiff < 0) {
                                        // Overdue actions (past dates only)
                                        row.classList.add('action-overdue');
                                    }
                                    // Only if not overdue, check if it's upcoming
                                    else if (daysDiff <= 7) {
                                        // Upcoming actions (today or within next 7 days)
                                        row.classList.add('action-upcoming');
                                    }
                                }
                            }
                            myActionsTbody.appendChild(row);
                        });
                    } else {
                        // Show empty message
                        myActionsEmpty.style.display = 'block';
                    }
                })
                .catch(error => {
                    console.error('Error fetching actions:', error);
                    // Hide loading indicator
                    myActionsLoading.style.display = 'none';
                    // Show error message
                    myActionsError.style.display = 'block';
                });
        }

        // Load actions when the page loads
        loadMyActions();
    });
</script>
{% endblock %}
